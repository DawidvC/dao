# Template class example
#
# WARNING:
# Template class is NOT an official feature of Dao,
# and probably NEVER going to be an official feature.
#
# This example is mainly used for testing purpose!
# It can test type, class and function specializations.
#
# This example and the relevant codes should be removed
# from the branches for official releases!

class Item<@V>
{
	var value : @V;
	var next : Item;

	routine Item( v : @V ){ value = v }
}

class LinkList<@V,@T=int>
{
	var first : Item<@V>;
	var last  : Item<@V>;

	routine LinkList(){
		io.writeln( std.about( self ) );
	}

	routine Append( value : @V ){
		item = Item<@V>( value );
		#io.writeln( std.about( first, last, item ) );
		if( first == Item<@V>::default ) first = item else last.next = item;
		last = item;
	}
	routine Print(){
		item = first;
		io.writeln( item.value, item );
		while( item.next != Item<@V>::default ){
			item = item.next;
			io.writeln( item.value, item );
		}
	}
}
ll = LinkList<int>();
ll.Append(11);
ll.Append(22);
ll.Append(33);
ll.Print();
#ll.Append('abc'); # error

class StringLinkList : LinkList<string>
{
}

sll = StringLinkList();
sll.Append( 'AA' )
sll.Append( 'BB' )
sll.Append( 'CC' )
sll.Print();
#sll.Append( 123 ); # error

class Base{ routine Base(){} }

class LinkList2<@V,@T=int> : LinkList<@V,@T>
{
}

ll2 = LinkList2<int>();
ll2.Append(11);
ll2.Append(22);
ll2.Append(33);
ll2.Print();

class LinkList3<@X> : LinkList<@X>
{
}
ll3 = LinkList3<int>();
ll3.Append(11);
ll3.Append(33);
ll3.Append(33);
ll3.Print();

class LinkList4<@V> : StringLinkList
{
}
sll = LinkList4<int>();
sll.Append( 'AA' )
sll.Append( 'BB' )
sll.Append( 'CC' )
sll.Print();
