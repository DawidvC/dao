# Demo for decorators:
#
# Decorators are functions that can modify (decorate) other functions.
#
# A decorator is almost identical to a noraml function except that it
# must be declared with a name prefixed with @, and the first parameter
# must be a routine type, which determines which type of routines can be
# decorated by this decorator.


io.writeln( "########################" )
io.writeln( "## Simple Decorator" )
io.writeln( "########################" )


# Here is a simple decorator that can decorate any function.
# In decorators, a variable must be declared in a pair of brackets
# right after the first parameter name. This variable will be used
# to hold the parameters that are passed to the function.
routine @Decorator( func(args) : routine )
{
	io.writeln( "Calling function:", std.about(func) );
	return func( args, ... ); # ... for parameter expanding;
}


# If the decorator does not take any parameter other than
# the function to be decorated, the brackets can be omitted:
@Decorator
routine Function(){ io.writeln( "Function()" ); }

@Decorator
routine Function( a : int ){ io.writeln( "Function(int)", a ); }

Function();
Function(123);



io.writeln( "########################" )
io.writeln( "## Test Decorator" )
io.writeln( "########################" )



# Here is a deocrator that can only be applied to functions that
# accepts an integer as parameter and returns a string.
#
# For a decorator for testing such as this one, the expected
# output can be passed as additional parameters to the decorator:
routine @TestDecorator( func(args) : routine<index:int=>string>, expected = "" )
{
	res = func( args, ... );
	io.writeln( res );
	io.writeln( "Test result:", res == expected ? "passed" : "failed" );
	return res;
}

@TestDecorator( "Hello" )
routine Hello( index = 0 )
{
	io.writeln( "Calling Hello(int)" );
	return "Hello";
}

Hello();



io.writeln( "########################" )
io.writeln( "## Overloaded Decorator" )
io.writeln( "########################" )



# Here is an overloaded deocrator that can only be applied to functions
# that accepts a string as parameter and returns an integer.
routine @TestDecorator( func(args) : routine<name:string=>int>, expected = 0 )
{
	res = func( args, ... );
	io.writeln( res );
	io.writeln( "Test result:", res == expected ? "passed" : "failed" );
	return res;
}



# Decorators can be chained:
@Decorator
@TestDecorator( 123 )
routine Hello( name : string )
{
	io.writeln( "Calling Hello(string)", name );
	return 123;
}

io.writeln( Hello( "abc" ) );



io.writeln( "################################################" )
io.writeln( "## Decorators can be used a constant expressioin" )
io.writeln( "################################################" )

const Hello3 = @Decorator( Hello )
Hello3( "def" )



io.writeln( "##########################" )
io.writeln( "## Running time Decoration" )
io.writeln( "##########################" )


routine Hello2( index = 123 )
{
	io.writeln( "Calling Hello2(int)", index );
	return "Hello";
}
# Running time decoration:
func = @TestDecorator( Hello2, "Hello" );
io.writeln( "--------" )
func(123)

func = @TestDecorator( func );
io.writeln( "--------" )
func(123)

# Decorator can be assigned to variables and applied at running time:
deco = @Decorator;
func = deco( func );

io.writeln( "--------" )
func(789);



io.writeln( "##########################" )
io.writeln( "## Decorator and Class" )
io.writeln( "##########################" )

# Decorators can be applied to class methods as well.
# Here is a decorator for static methods:
routine @StaticDecorator( meth(args) :routine<id:int=>int>, value = 123 )
{
	io.writeln( args, value );
	args.id = value;
	return meth( args, ... );
}

# Here is a decorator for instance methods:
routine @MethodDecorator( meth(args) :routine<self:@T,id:int=>int>, value = 123 )
{
	io.writeln( args, value );
	args.id = value;
	return meth( args, ... );
}

class Klass
{
	# Decorator can also be defined a class method.
	# Since the first parameter of a decorator must be a routine type,
	# such decorator method has to be defined as a static method.
	static routine @ClassDecorator( meth(args) :routine<id:string=>@X>, value = "abc" ){
		io.writeln( args, value );
		args.id = value;
		return meth( args, ... );
	}

	# Decorator can be applied to class methods:
	@StaticDecorator( 456 )
	static routine StaticMeth( id :int ){ io.writeln( id ); return id }

	@ClassDecorator
	static routine StaticMeth( id :string ){ io.writeln( id ) }

	@MethodDecorator( 789 )
	routine Meth( id :int ){ io.writeln( id ); return id }
}

Klass::StaticMeth( 0 );
Klass::StaticMeth( "a" );

k = Klass();
k.Meth(1);
