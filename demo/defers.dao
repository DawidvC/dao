
# A "defer" block is a block of code that can be executed when
# a function returns normally or exits due to excpetions. Its
# execution can be conditional or unconditional with respect
# to exceptions:
# -- "defer{block}" or "defer(){block}": unconditional exection,
#    when a function exits with or without exception;
# -- "defer(none){block}": conditional execution, only when the
#    function exits without exception;
# -- "defer(any){block}": conditional execution, when the function
#    exit with any exception(s);
# -- "defer(type){block}": conditional execution, only when the
#    function exit with exception(s) matching to "type";
# -- "defer(type as name){block}": the same as "defer(type){block}"
#    except that the exception object will be accessible by "name".
# 
# A defer block is compiled as a closure, so it can access outer
# scope constants and varaibles in the same way as closures.
# These outer scope variables are captured at the time the defer
# block is reached in the normal execution.
#
# When a function exits, all the executable defer blocks that have
# been reached in the normal execution will be executed in the reverse
# order of being reached. A conditional defer block can be executed
# multiple times, if there are multiple exceptions that match to its
# condition type.
#
# A conditional defer may explicitly return a value that matches to
# the return type of the function. Such defer will remove the exception
# object from the exception stack (namely disable the exceptioin) that
# is used to invoke the defer. And the return value of the defer block
# will be used as the return value of the function. Defer blocks without
# explicit returns will simply leave the exceptions in the exception
# stack and allow them to invoke other proper defer blocks or terminate
# the program.
#

routine Test()
{
	defer {
		io.writeln( 'always executed' )
	}
	defer( Exception::Error as error ){
		io.writeln( 'executed with error that will be disabled' )
		return 999
	}
	defer( Exception ){
		io.writeln( 'executed with exception that will not be disabled' )
	}

	for( i = 2 : 5 ) defer { io.writeln( 'deferred', i ) }

	error( Exception::Error( 'something' ) )
	io.writeln( 'returning' );
	return 123
}

io.writeln( Test() )
