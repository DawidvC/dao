
# The handling of panics is very much like the handling of panics
# in the Go programming language.
#
# In Dao, a panic or exception can be raised by the built-in function
# panic() which can take any value as parameter.
#
# To handle panics, one may need to combine deferred blocks and the
# built-in function recover(), which may return a list of exceptions.
# When recover() is called in multiple deferred blocks, only the call
# to recover() in the lastly executed deferred block will return the
# exceptions. An exception type can be passed to recover() to request
# a specific type of exception.

routine Test()
{
	defer { io.writeln( 'first defer:', recover() ) }
	defer { io.writeln( 'second defer:', recover() ) }
	io.writeln( 'Test(): before panic;' )
	panic( 123 )
	io.writeln( 'Test(): after panic;' )
}

Test()

routine Test2()
{
	rout = routine(){
		defer { io.writeln( 'recovering:', recover() ) }
		io.writeln( 'closure: before panic;' )
		panic(456)
		io.writeln( 'closure: after panic;' )
	}
	io.writeln( 'Test2(): before panic;' )
	rout()
	io.writeln( 'Test2(): after panic;' )
}

Test2()


# Example to handle user defined exception type:
class MyError : Exception::Error
{
	routine serialize(){ return ('MyError', self) }
}

routine Test3()
{
	defer {
		io.writeln( 'recovering from', recover( MyError ) )
	}

	io.writeln( 'Test3(): before panic;' )
	panic( MyError() );
	io.writeln( 'Test3(): after panic;' )
}

Test3()


# To simplify the handling of panics, Dao support a special type
# of code blocks that are executed in new stack frames. Such blocks
# can be defined in the following ways:
#     frame { block }
#     frame ( value ) { block }
# which are expressions that may return values. In the second case,
# if the "block" raises an exception, the default "value" is returned
# instead, and the exception is suppressed.

fout = io::stdio

frame {
	defer { recover() }
	fout = io.open( "NonExistentFile.txt", 'r+' )
}

if( fout != io::stdio ) defer{ fout.close() }

fout.writeln( 'hello' )


# A simpler way to write the above codes:
fout = frame( io::stdio ){ io.open( "NonExistentFile.txt", 'r+' ) }

# Or using the assertion operator ??:
# fout = io.open( "NonExistentFile.txt", 'r+' ) ?? io::stdio

if( fout != io::stdio ) defer{ fout.close() }

fout.writeln( 'hello' )
