
class Base
{
	var value = 456
	routine Meth2(){ io.writeln( self, value ) }
}

#
# Classes to be used as mixins can be specified in a pair of brackets
# following the class name. Only classes without parent classes can
# be used as mixins.
#
class Mixin ( Base )
{
	var index = 123

	routine Meth(){ io.writeln( self, index, value ) }
	routine Meth2( a : string ){ io.writeln( self, index, value, a ) }
}

#
# The "Base" class will be presented only once in "Klass":
#
class Klass ( Base, Mixin )
{
	var index = 123456
	routine Meth2( a : int ){ io.writeln( self, index, value, a ) }
}

k = Klass()

io.writeln( k.index )

k.Meth()
k.Meth2()
k.Meth2( 'abc' )
k.Meth2( 789 )


class Decorator
{
	routine @_Test_( meth :routine<self:Decorator> ){
		io.writeln( 'Decorator::_Test_()' )
		meth( __args__, ... );
	}
	routine @_Prefix( meth :routine<self:Decorator> ){
		io.writeln( 'Decorator::_Prefix()' )
		meth( __args__, ... );
	}
	routine @Suffix_( meth :routine<self:Decorator> ){
		io.writeln( 'Decorator::Suffix_()' )
		meth( __args__, ... );
	}
	routine @_Prefix_Suffix_( meth :routine<self:Decorator> ){
		io.writeln( 'Decorator::_Prefix_Suffix_()' )
		meth( __args__, ... );
	}
}

class MyClass ( Decorator )
{
	routine Test(){
		io.writeln( 'MyClass::Test()' )
	}
	routine PrefixTest(){
		io.writeln( 'MyClass::PrefixTest()' )
	}
	routine TestSuffix(){
		io.writeln( 'MyClass::TestSuffix()' )
	}
	routine PrefixTestSuffix(){
		io.writeln( 'MyClass::PrefixTestSuffix()' )
	}
}

obj = MyClass()
obj.Test()
obj.PrefixTest()
obj.TestSuffix()
obj.PrefixTestSuffix()
#{
#}
