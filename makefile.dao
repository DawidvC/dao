
daovm = DaoMake::Project( "Dao" )

daovm_path = DaoMake::Option( "PATH", "/usr/local" )
daovm_path = DaoMake::Option( "PATH", "test-installation" )
daovm_bin_path = DaoMake::Option( "BIN-PATH", daovm_path + "/bin" )
daovm_lib_path = DaoMake::Option( "LIB-PATH", daovm_path + "/lib" )
daovm_mod_path = DaoMake::Option( "MOD-PATH", daovm_path + "/lib/dao/modules" )
daovm_doc_path = DaoMake::Option( "DOC-PATH", daovm_path + "/shared/dao" )

daovm.ExportPath( "BIN-PATH", daovm_bin_path );
daovm.ExportPath( "LIB-PATH", daovm_lib_path );
daovm.ExportPath( "MOD-PATH", daovm_mod_path );
daovm.ExportPath( "DOC-PATH", daovm_doc_path );

daovm_help_lang = DaoMake::Option( "HELP-LANG", "en" )

daovm_full_static = DaoMake::Option( "FULL-STATIC", $OFF )

daovm_with_macro      = DaoMake::Option( "MACRO",      $ON )
daovm_with_regex      = DaoMake::Option( "REGEX",      $ON )
daovm_with_longint    = DaoMake::Option( "LONGINT",    $ON )
daovm_with_numarray   = DaoMake::Option( "NUMARRAY",   $ON )
daovm_with_dynclass   = DaoMake::Option( "DYNCLASS",   $ON )
daovm_with_decorator  = DaoMake::Option( "DECORATOR",  $ON )
daovm_with_thread     = DaoMake::Option( "THREAD",     $ON )
daovm_with_concurrent = DaoMake::Option( "CONCURRENT", $ON )

daovm_with_readline   = DaoMake::Option( "READLINE",   $ON )

if( DaoMake::IsMinix() ) daovm_with_thread = $OFF;
if( daovm_full_static == $ON ){
	daovm_with_thread = $OFF;
	daovm_with_readline = $OFF;
}
if( daovm_with_thread == $OFF ) daovm_with_concurrent = $OFF;

if( daovm_with_macro      == $ON ) daovm.AddDefinition( "DAO_WITH_MACRO" )
if( daovm_with_regex      == $ON ) daovm.AddDefinition( "DAO_WITH_REGEX" )
if( daovm_with_longint    == $ON ) daovm.AddDefinition( "DAO_WITH_LONGINT" )
if( daovm_with_numarray   == $ON ) daovm.AddDefinition( "DAO_WITH_NUMARRAY" )
if( daovm_with_dynclass   == $ON ) daovm.AddDefinition( "DAO_WITH_DYNCLASS" )
if( daovm_with_decorator  == $ON ) daovm.AddDefinition( "DAO_WITH_DECORATOR" )
if( daovm_with_thread     == $ON ) daovm.AddDefinition( "DAO_WITH_THREAD" )
if( daovm_with_concurrent == $ON ) daovm.AddDefinition( "DAO_WITH_CONCURRENT" )


daovm_kernel_headers =
{
	"kernel/dao.h" ,
	"kernel/daoArray.h" ,
	"kernel/daoBase.h" ,
	"kernel/daoClass.h" ,
	"kernel/daoConst.h" ,
	"kernel/daoGC.h" ,
	"kernel/daoLexer.h" ,
	"kernel/daoMacro.h" ,
	"kernel/daoMap.h" ,
	"kernel/daoNamespace.h" ,
	"kernel/daoNumtype.h" ,
	"kernel/daoObject.h" ,
	"kernel/daoParser.h" ,
	"kernel/daoBytecode.h" ,
	"kernel/daoOptimizer.h" ,
	"kernel/daoProcess.h" ,
	"kernel/daoRegex.h" ,
	"kernel/daoRoutine.h" ,
	"kernel/daoSched.h" ,
	"kernel/daoStdlib.h" ,
	"kernel/daoStdtype.h" ,
	"kernel/daoStream.h" ,
	"kernel/daoString.h" ,
	"kernel/daoThread.h" ,
	"kernel/daoType.h" ,
	"kernel/daoValue.h" ,
	"kernel/daoVmcode.h" ,
	"kernel/daoVmspace.h" 
}

daovm_kernel_sources =
{
	"kernel/daoArray.c" ,
	"kernel/daoClass.c" ,
	"kernel/daoConst.c" ,
	"kernel/daoGC.c" ,
	"kernel/daoLexer.c" ,
	"kernel/daoMacro.c" ,
	"kernel/daoMap.c" ,
	"kernel/daoNamespace.c" ,
	"kernel/daoNumtype.c" ,
	"kernel/daoObject.c" ,
	"kernel/daoParser.c" ,
	"kernel/daoBytecode.c" ,
	"kernel/daoOptimizer.c" ,
	"kernel/daoProcess.c" ,
	"kernel/daoRegex.c" ,
	"kernel/daoRoutine.c" ,
	"kernel/daoSched.c" ,
	"kernel/daoStdlib.c" ,
	"kernel/daoStdtype.c" ,
	"kernel/daoStream.c" ,
	"kernel/daoString.c" ,
	"kernel/daoThread.c" ,
	"kernel/daoType.c" ,
	"kernel/daoValue.c" ,
	"kernel/daoVmcode.c" ,
	"kernel/daoVmspace.c" 
}


daovm_kernel_objects = DaoMake::Objects( daovm_kernel_sources, daovm_kernel_headers )
daovm_main_object    = DaoMake::Objects( { "kernel/daoMain.c" }, daovm_kernel_headers );

daovm_dll = daovm.AddSharedLibrary( "dao", daovm_kernel_objects )
daovm_lib = daovm.AddStaticLibrary( "dao", daovm_kernel_objects )
daovm_exe = daovm.AddExecutable( "dao", daovm_main_object )

if( DaoMake::Option( "STATIC", $OFF ) == $ON and not DaoMake::IsWin32() ){
	daovm_exe.AddObjects( daovm_kernel_objects );
}else{
	rpath = DaoMake::Settings["DLL-RPATH"] + daovm_lib_path;
	daovm_exe.AddLinkingFlag( rpath + " -L. -ldao" );
	daovm_exe.AddDependency( daovm_dll );
}

daovm_exe.EnableDynamicExporting()
daovm_dll.EnableDynamicExporting()

if( DaoMake::IsUnix() ){
	daovm.AddDefinition( "UNIX" )
	if( DaoMake::IsMacOSX() ) daovm.AddDefinition( "MAC_OSX" )
	daovm.AddCompilingFlag( "-fPIC" )
	daovm.AddLinkingFlag( "-lm" )
	if( daovm_with_thread == $ON ) daovm.AddLinkingFlag( "-lpthread" )
}else if( DaoMake::IsWin32() ){
	daovm.AddDefinition( "WIN32" )
}

if( daovm_with_readline == $ON ){
	readline = DaoMake::FindPackage( "ReadLine" )
	if( readline ){
		daovm_main_object.AddDefinition( "DAO_USE_READLINE" )
		daovm_main_object.UsePackage( readline )
	}
}

daovm.ExportCompilingFlags( daovm.MakeDefinitions() )
if( DaoMake::IsWin32() ) daovm.ExportLinkingFlags( "-ldao" )



auxlib = daovm.AddDirectory( "auxlib", "modules/auxlib" )
syslib = daovm.AddDirectory( "syslib", "modules/syslib" )
help = daovm.AddDirectory( "help", "modules/help" )
math = daovm.AddDirectory( "math", "modules/math" )
meta = daovm.AddDirectory( "meta", "modules/meta" )
serializer = daovm.AddDirectory( "serializer", "modules/serializer" )

auxlib.AddDependency( daovm_dll )
syslib.AddDependency( daovm_dll )
help.AddDependency( daovm_dll )
math.AddDependency( daovm_dll )
meta.AddDependency( daovm_dll )
serializer.AddDependency( daovm_dll )

daovm.AddVariable( "HAS_DIR", DaoMake::Settings["HAS-DIR"] );
daovm.AddVariable( "MKDIR", DaoMake::Settings["MKDIR"] );
daovm.AddVariable( "HELP_LANG", daovm_help_lang );

daovm_doc = daovm.AddCommand( "doc", "@$(HAS_DIR) doc/html || $(MKDIR) doc/html" );
daovm_doc.AddCommand( "@$(HAS_DIR) doc/html/$(HELP_LANG) || $(MKDIR) doc/html/$(HELP_LANG)" );
daovm_doc.AddCommand( "DAO_HELP_LANG=$(HELP_LANG) ./dao -e \"load help; help.export('','doc/html/$(HELP_LANG)')\"" );

daovm_doc.AddDependency( help );


daovm.Install( daovm_exe, daovm_bin_path )
daovm.Install( daovm_dll, daovm_lib_path )
daovm.Install( daovm_lib, daovm_lib_path )
daovm.Install( daovm_doc, daovm_doc_path )

