###########################################################################
# DaoMake supports exactly the same syntax of Dao.
#
#
##################
# Compiling Units:
##################
#
# A Compiling Unit can have preprocessor definitions, including paths,
# linking paths, compiling flags and linking paths etc. attached.
#
# Basic constructs:
# -- Project;
# -- Objects;
# -- Executable;
# -- Shared Library;
# -- Static Library;
#
################
# Project:
################
#
# Each DaoMake file should contain exactly one Project object, which is the
# top level object that can be used to manage the building settings and targets.
# As a Compiling Unit, common compiling and linking settings can be attached it,
# which allows such settings to be applied to its children Compiling Units
# automatically.
# 
#     daovm = DaoMake::Project( "Dao" )
#     
#     Project( name : string ) => Project
# 
# 
################
# Objects:
################
# 
# Objects is the most basic type of Compiling Unit, which can be shared by
# multiple executable and library units. It has to be constructed from header
# and source files:
# 
#     daovm_kernel_objects = daovm.AddObjects( sources, headers )
#     
# AddObjects( self :Project, sources :list<string>, headers :list<string> = {} ) =>Objects
#     
# "daovm_kernel_objects" will be a child unit of "daovm" and inherits
# the common compiling and linking settings from it.
# 
#     daovm_kernel_objects.AddHeaders( header_file )
#     daovm_kernel_objects.AddSources( source_file )
#     
#     AddHeaders( self :Objects, header :string, ... :string ) =>Objects
#     AddSources( self :Objects, source :string, ... :string ) =>Objects
#     
# 
################
# Executable:
################
# 
# An Executable object defines a building target. As a Compiling Unit,
# it can have its own linking setttings.
# 
################
# Library:
################
# 
# 
#
#
###########################################################################


daovm = DaoMake::Project( "Dao" )


daovm_kernel_headers =
{
	"kernel/dao.h" ,
	"kernel/daoArray.h" ,
	"kernel/daoBase.h" ,
	"kernel/daoClass.h" ,
	"kernel/daoConst.h" ,
	"kernel/daoGC.h" ,
	"kernel/daoLexer.h" ,
	"kernel/daoMacro.h" ,
	"kernel/daoMap.h" ,
	"kernel/daoNamespace.h" ,
	"kernel/daoNumtype.h" ,
	"kernel/daoObject.h" ,
	"kernel/daoParser.h" ,
	"kernel/daoBytecode.h" ,
	"kernel/daoOptimizer.h" ,
	"kernel/daoProcess.h" ,
	"kernel/daoRegex.h" ,
	"kernel/daoRoutine.h" ,
	"kernel/daoSched.h" ,
	"kernel/daoStdlib.h" ,
	"kernel/daoStdtype.h" ,
	"kernel/daoStream.h" ,
	"kernel/daoString.h" ,
	"kernel/daoThread.h" ,
	"kernel/daoType.h" ,
	"kernel/daoValue.h" ,
	"kernel/daoVmcode.h" ,
	"kernel/daoVmspace.h" 
}

daovm_kernel_sources =
{
	"kernel/daoArray.c" ,
	"kernel/daoClass.c" ,
	"kernel/daoConst.c" ,
	"kernel/daoGC.c" ,
	"kernel/daoLexer.c" ,
	"kernel/daoMacro.c" ,
	"kernel/daoMap.c" ,
	"kernel/daoNamespace.c" ,
	"kernel/daoNumtype.c" ,
	"kernel/daoObject.c" ,
	"kernel/daoParser.c" ,
	"kernel/daoBytecode.c" ,
	"kernel/daoOptimizer.c" ,
	"kernel/daoProcess.c" ,
	"kernel/daoRegex.c" ,
	"kernel/daoRoutine.c" ,
	"kernel/daoSched.c" ,
	"kernel/daoStdlib.c" ,
	"kernel/daoStdtype.c" ,
	"kernel/daoStream.c" ,
	"kernel/daoString.c" ,
	"kernel/daoThread.c" ,
	"kernel/daoType.c" ,
	"kernel/daoValue.c" ,
	"kernel/daoVmcode.c" ,
	"kernel/daoVmspace.c" 
}


daovm_kernel_objects = DaoMake::Objects( daovm_kernel_sources, daovm_kernel_headers )
daovm_main_object    = DaoMake::Objects( { "kernel/daoMain.c" }, daovm_kernel_headers );

daovm_exe = daovm.AddExecutable( "dao", daovm_kernel_objects, daovm_main_object )
daovm_dll = daovm.AddSharedLibrary( "dao", daovm_kernel_objects )
daovm_lib = daovm.AddStaticLibrary( "dao", daovm_kernel_objects )

daovm_exe.EnableDynamicExporting()
daovm_dll.EnableDynamicExporting()
daovm_lib.EnableDynamicExporting()

if( DaoMake::IsUnix() ){
	daovm.AddDefinition( "UNIX" )
	daovm.AddCompilingFlag( "-fPIC" );
	daovm.AddLinkingFlag( "-lm" );
	daovm.AddLinkingFlag( "-lpthread" );
	if( DaoMake::IsMacOSX() ) daovm.AddDefinition( "MAC_OSX" )
	if( not DaoMake::IsMinix() ) daovm.AddDefinition( "DAO_WITH_THREAD" )
}else if( DaoMake::IsWin32() ){
	daovm.AddDefinition( "WIN32" )
}

#{
readline = DaoMake::FindPackage( "ReadLine" )
if( readline ){
	daovm_exe.AddDefinition( "DAO_USE_READLINE" )
	daovm_exe.UsePackage( readline )
}

daovm.Install( daovm_exe )
daovm.Install( daovm_dll )
daovm.Install( daovm_lib )

daovm.AddProject( "modules/auxlib" )
daovm.AddProject( "modules/syslib" )
#}
