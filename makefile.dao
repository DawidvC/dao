
#
# Create a project named "Dao", which can be accessed by other
# DaoMake files using DaoMake::FindPackage( "Dao" ).
#
daovm = DaoMake::Project( "Dao" )

#
# Create options that can be modified from command line arguments
# by specifying command line option "--option-NAME VALUE", where
# "NAME" is the name of the option and "VALUE" the specified value.
#
# Options to set installation paths.
#
daovm_root_path = DaoMake::Option( "INSTALL-PATH", "/usr/local" )
daovm_bin_path = DaoMake::Option( "BIN-PATH", daovm_root_path + "/bin" )
daovm_lib_path = DaoMake::Option( "LIB-PATH", daovm_root_path + "/lib" )
daovm_inc_path = DaoMake::Option( "INC-PATH", daovm_root_path + "/include/dao" )
daovm_mod_path = DaoMake::Option( "MOD-PATH", daovm_root_path + "/lib/dao/modules" )
daovm_doc_path = DaoMake::Option( "DOC-PATH", daovm_root_path + "/shared/dao" )


#
# Export paths that can be retrieved using:
#   daovm = DaoMake::FindPackage( "Dao" )
#   path = daovm.GetPath( "PATH-NAME" )
#
daovm.ExportPath( "INSTALL-PATH", daovm_root_path );
daovm.ExportPath( "BIN-PATH", daovm_bin_path );
daovm.ExportPath( "LIB-PATH", daovm_lib_path );
daovm.ExportPath( "MOD-PATH", daovm_mod_path );
daovm.ExportPath( "DOC-PATH", daovm_doc_path );


daovm_full_static = DaoMake::Option( "FULL-STATIC", $OFF )


#
# Options to enable/disable language features:
#
daovm_with_macro      = DaoMake::Option( "MACRO",      $ON )
daovm_with_regex      = DaoMake::Option( "REGEX",      $ON )
daovm_with_longint    = DaoMake::Option( "LONGINT",    $ON )
daovm_with_numarray   = DaoMake::Option( "NUMARRAY",   $ON )
daovm_with_dynclass   = DaoMake::Option( "DYNCLASS",   $ON )
daovm_with_decorator  = DaoMake::Option( "DECORATOR",  $ON )
daovm_with_thread     = DaoMake::Option( "THREAD",     $ON )
daovm_with_concurrent = DaoMake::Option( "CONCURRENT", $ON )

daovm_with_readline   = DaoMake::Option( "READLINE",   $ON )

daovm_make_javascript = DaoMake::Option( "JAVASCRIPT", $OFF )

if( DaoMake::IsMinix() or daovm_make_javascript == $ON ) daovm_with_thread = $OFF;
if( daovm_full_static == $ON ){
	daovm_with_thread = $OFF;
	daovm_with_readline = $OFF;
}
if( daovm_with_thread == $OFF ) daovm_with_concurrent = $OFF;


#
# project.AddDefinition( "DEFINITION_NAME" ) will add "-DDEFINITION_NAME"
# to the compiling flags of all its targets.
#
if( daovm_with_macro      == $ON ) daovm.AddDefinition( "DAO_WITH_MACRO" )
if( daovm_with_regex      == $ON ) daovm.AddDefinition( "DAO_WITH_REGEX" )
if( daovm_with_longint    == $ON ) daovm.AddDefinition( "DAO_WITH_LONGINT" )
if( daovm_with_numarray   == $ON ) daovm.AddDefinition( "DAO_WITH_NUMARRAY" )
if( daovm_with_dynclass   == $ON ) daovm.AddDefinition( "DAO_WITH_DYNCLASS" )
if( daovm_with_decorator  == $ON ) daovm.AddDefinition( "DAO_WITH_DECORATOR" )
if( daovm_with_thread     == $ON ) daovm.AddDefinition( "DAO_WITH_THREAD" )
if( daovm_with_concurrent == $ON ) daovm.AddDefinition( "DAO_WITH_CONCURRENT" )


daovm_kernel_headers =
{
	"kernel/dao.h" ,
	"kernel/daoArray.h" ,
	"kernel/daoBase.h" ,
	"kernel/daoClass.h" ,
	"kernel/daoConst.h" ,
	"kernel/daoGC.h" ,
	"kernel/daoLexer.h" ,
	"kernel/daoMacro.h" ,
	"kernel/daoMap.h" ,
	"kernel/daoNamespace.h" ,
	"kernel/daoNumtype.h" ,
	"kernel/daoObject.h" ,
	"kernel/daoParser.h" ,
	"kernel/daoBytecode.h" ,
	"kernel/daoOptimizer.h" ,
	"kernel/daoProcess.h" ,
	"kernel/daoRegex.h" ,
	"kernel/daoRoutine.h" ,
	"kernel/daoSched.h" ,
	"kernel/daoStdlib.h" ,
	"kernel/daoStdtype.h" ,
	"kernel/daoStream.h" ,
	"kernel/daoString.h" ,
	"kernel/daoThread.h" ,
	"kernel/daoType.h" ,
	"kernel/daoValue.h" ,
	"kernel/daoVmcode.h" ,
	"kernel/daoVmspace.h" 
}

daovm_kernel_sources =
{
	"kernel/daoArray.c" ,
	"kernel/daoClass.c" ,
	"kernel/daoConst.c" ,
	"kernel/daoGC.c" ,
	"kernel/daoLexer.c" ,
	"kernel/daoMacro.c" ,
	"kernel/daoMap.c" ,
	"kernel/daoNamespace.c" ,
	"kernel/daoNumtype.c" ,
	"kernel/daoObject.c" ,
	"kernel/daoParser.c" ,
	"kernel/daoBytecode.c" ,
	"kernel/daoOptimizer.c" ,
	"kernel/daoProcess.c" ,
	"kernel/daoRegex.c" ,
	"kernel/daoRoutine.c" ,
	"kernel/daoSched.c" ,
	"kernel/daoStdlib.c" ,
	"kernel/daoStdtype.c" ,
	"kernel/daoStream.c" ,
	"kernel/daoString.c" ,
	"kernel/daoThread.c" ,
	"kernel/daoType.c" ,
	"kernel/daoValue.c" ,
	"kernel/daoVmcode.c" ,
	"kernel/daoVmspace.c" 
}

#
# DaoMake::Objects( source_file_list, header_file_list ) will create an object
# set that includes the objects compiled from the "source_file_list":
#
daovm_kernel_objects = DaoMake::Objects( daovm_kernel_sources, daovm_kernel_headers )
daovm_main_object    = DaoMake::Objects( { "kernel/daoMain.c" }, daovm_kernel_headers );


#
# Add a shared library target named "dao" to the project.
# This target will be built from the object set "daovm_kernel_objects".
#
daovm_dll = daovm.AddSharedLibrary( "dao", daovm_kernel_objects )

#
# Add a static library target to the project:
#
daovm_lib = daovm.AddStaticLibrary( "dao", daovm_kernel_objects )

#
# Add an executable target:
#
daovm_exe = daovm.AddExecutable( "dao", daovm_main_object )

#
# Add an executable target:
#
if( daovm_make_javascript == $ON ){
	ems_export = @[]-s EXPORTED_FUNCTIONS="['_DaoInit','_DaoVmSpace_Eval','_DaoQuit']"@[]
	daovm_js = daovm.AddJavaScriptLibrary( "dao", daovm_kernel_objects )
	daovm_js.AddDefinition( "DAO_MBSTRING_ONLY" )
	daovm_js.AddDefinition( "WITHOUT_WCTYPE_H" )
	daovm_js.AddDefinition( "WITHOUT_DIRECT_THREADING" )
	daovm_js.AddLinkingFlag( ems_export )
	daovm_js.AddLinkingFlag( "-O2 --closure 1" )
}


daovm_partial_static = DaoMake::Option( "STATIC", $OFF );

#
# Do not build statically linked executable on Windows, because the modules
# must link against dao.dll, so the executable should also link against it.
#
if( DaoMake::IsWin32() ) daovm_partial_static = $OFF;

rpath = DaoMake::MakeRpath( ".", DaoMake::BinaryPath(), daovm_lib_path )

if( daovm_partial_static == $ON ){
	daovm_exe.AddObjects( daovm_kernel_objects );
}else{
	#
	# Linking against the Dao shared library, the "-rpath" should be
	# passed to the linker, so that the shared library can be located
	# properly with or without installation.
	#
	daovm_exe.AddLinkingFlag( rpath + " -L. -ldao" );
	daovm_exe.AddDependency( daovm_dll );
}

#
# On non-windows systems, Dao modules need not link to the Dao shared library,
# if the executable and shared library is linked with dynamic symbol exporting.
#
daovm_exe.EnableDynamicExporting()
daovm_dll.EnableDynamicExporting()



if( DaoMake::IsUnix() ){
	daovm.AddDefinition( "UNIX" )
	if( DaoMake::IsMacOSX() ) daovm.AddDefinition( "MAC_OSX" )
	daovm.AddCompilingFlag( "-fPIC" )
	daovm.AddLinkingFlag( "-lm" )
	if( DaoMake::IsLinux() ) daovm.AddLinkingFlag( "-ldl" )
	if( daovm_with_thread == $ON ) daovm.AddLinkingFlag( "-lpthread" )
}else if( DaoMake::IsWin32() ){
	daovm.AddDefinition( "WIN32" )
	if( DaoMake::IsMinGW() ) daovm.AddLinkingFlag( "-lwinmm" )
}else if( DaoMake::IsHaiku() ){
	daovm.AddDefinition( "UNIX" )
	# Note:
	# pthread is automatically linked as part of:
	# /Haiku/develop/lib/x86/libroot.so.
}



if( daovm_with_readline == $ON ){
	#
	# DaoMake::FindPackage( "NAME" ) will search and load "FindNAME.dao",
	# and then search for a project object named "NAME". This project
	# object will be returned if found. Otherwise, a default project
	# will be returned (which will not pass the conditional test).
	#
	# DaoMake::FindPackage( "NAME" ) will search "FindNAME.dao" in
	# the following subdirectories:
	# 1. "packages", relative to the daomake execution directory;
	# 2. "packages", relative to the daomake executable directory;
	# 3. Unix only: "../shared/daomake/packages", relative to the 
	#    daomake executable directory;
	#
	readline = DaoMake::FindPackage( "ReadLine" )
	if( readline ){
		#
		# The definition passed only to the compiling flags for compiling
		# "daovm_main_object".
		#
		daovm_main_object.AddDefinition( "DAO_USE_READLINE" )
		#
		# The "ReadLine" should have exported some compiling flags and
		# linking flags that will be added to "daovm_main_object" by
		# calling UsePackage().
		#
		daovm_main_object.UsePackage( readline )
	}
}


#
# Export compiling and linking flags that can be used by others
# by calling UsePackage().
#
daovm.ExportCompilingFlags( "-I" + DaoMake::SourcePath() + "/kernel" )
daovm.ExportCompilingFlags( daovm.MakeDefinitions() )
if( daovm_partial_static == $OFF ){
	daovm.ExportLinkingFlags( rpath + " -L" + DaoMake::BinaryPath() +  " -ldao" )
}
if( DaoMake::IsWin32() ){
	daovm.ExportLinkingFlags( "-lwinmm" );
}
if( DaoMake::IsUnix() ){
	daovm.ExportCompilingFlags( "-fPIC" )
	daovm.ExportLinkingFlags( "-lm" );
	if( DaoMake::IsLinux() ) daovm.ExportLinkingFlags( "-ldl" )
	if( daovm_with_thread == $ON ) daovm.ExportLinkingFlags( "-lpthread" )
}

#
# Export the static library target so that targets of other projects
# can link against this static library, for example by:
#   daovm = DaoMake::FindPackage( "Dao" )
#   daomake_exe.UseStaticPackage( daovm, "dao" );
#
daovm.ExportStaticLibrary( daovm_lib );



#
# Add sub projects as additional targets:
#
auxlib = daovm.AddDirectory( "auxlib", "modules/auxlib" )
syslib = daovm.AddDirectory( "syslib", "modules/syslib" )
help = daovm.AddDirectory( "help", "modules/help" )
math = daovm.AddDirectory( "math", "modules/math" )
meta = daovm.AddDirectory( "meta", "modules/meta" )
serializer = daovm.AddDirectory( "serializer", "modules/serializer" )

daomake = daovm.AddDirectory( "daomake", "tools/daomake" )
daotest = daovm.AddDirectory( "daotest", "tools/daotest" )
modules = daovm.AddDirectory( "modules", "modules" )

if( DaoMake::IsDir( "tools/clangdao" ) ) daovm.AddDirectory( "clangdao", "tools/clangdao" );


# Add dependencies:
auxlib.AddDependency( daovm_dll )
syslib.AddDependency( daovm_dll )
help.AddDependency( daovm_dll )
math.AddDependency( daovm_dll )
meta.AddDependency( daovm_dll )
serializer.AddDependency( daovm_dll )

daomake.AddDependency( daovm_lib )
modules.AddDependency( daovm_lib )
modules.AddDependency( daovm_exe )


DaoMake::SetTestTool( DaoMake::BinaryPath() + "/daotest" )
tests = daovm.AddDirectory( "tests", "tests" )
tests.AddDependency( modules )
tests.AddDependency( daotest )


daovm.GenerateFinder( $TRUE );

# Setup installations:
daovm.Install( daovm_bin_path, daovm_exe )
daovm.Install( daovm_lib_path, daovm_dll, daovm_lib )
daovm.Install( daovm_inc_path, daovm_kernel_headers )
daovm.Install( daovm.GetPath( "INSTALL-PATH" ) + "/shared/daomake/packages/", "FindDao.dao" );

