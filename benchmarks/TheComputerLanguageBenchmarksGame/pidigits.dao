load coroutine

type QuadLong = tuple<long,long,long,long>;

global gen_co = coroutine<none,QuadLong>()

routine gen_x( self :coroutine<none,QuadLong> )
{
	self.yield( (0L,0L,0L,0L) );
	for( k = 1 : ) self.yield( (k+0L, 4L*k + 2L, 0L, 2L*k + 1L) );
}
routine compose( a : QuadLong, b : QuadLong )
{
	(aq, ar, as_, at) = a;
	(bq, br, bs, bt) = b;
	return (aq*bq, aq*br + ar*bt, as_*bq + at*bs, as_*br + at*bt);
}
routine extract( a : QuadLong, j = 0 )
{
	(q, r, s, t) = a;
	return (int)( (q*j + r) / (s*j + t) );
}
routine pi_digits( self :coroutine<none,int> )
{
	y = 0;
	z = (1L, 0L, 0L, 1L);
	gen_co.start( gen_x );
	self.yield(0);
	while(1){
		while(y = extract(z,3); y != extract(z, 4) ){
			z = compose(z, gen_co.resume() );
			y = extract(z,3)
		}
		z = compose((10L, -10L*y, 0L, 1L), z);
		self.yield( y );
	}
}
routine main( n = 200 )
{
	width = 10;
	if( width > n ) width = n;
	digits = coroutine<none,int>()
	digits.start( pi_digits )
	for(i = 0 : width : n-1 ){
		#s = ''; for( j = 1 : width ) s += (string)digits();
		s = std.string( width ){ digits.resume() + '0'[0] }
		io.writef( '%s\t:%d\n', s, i+width );
	}
}
