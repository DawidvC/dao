

routine BottomUpTree(item, depth )
{
	if( depth > 0 ){
		i = item + item;
		depth = depth - 1;
		left = BottomUpTree(i-1, depth);
		right = BottomUpTree(i, depth);
		return { item, left, right };
	}
	return { item };
}

routine ItemCheck(tree)
{
	if( tree.size() == 3 ){
		return tree[0] + ItemCheck(tree[1]) - ItemCheck(tree[2]);
	}
	return tree[0];
}

routine main( N = 10 )
{
	mindepth = 4;
	maxdepth = mindepth + 2;
	if( maxdepth < N ) maxdepth = N;

	stretchdepth = maxdepth + 1;
	stretchtree = BottomUpTree(0, stretchdepth);

	io.writef( "stretch tree of depth %d\t check: %d\n", stretchdepth, ItemCheck(stretchtree) );

	longlivedtree = BottomUpTree(0, maxdepth);

	for( depth = mindepth : 2 : maxdepth ){
		iterations = 2 ** (maxdepth - depth + mindepth);
		check = 0;
		for( i = 1 : iterations )
			check = check + ItemCheck(BottomUpTree(1, depth)) + ItemCheck(BottomUpTree(-1, depth));

		io.writef("%d\t trees of depth %d\t check: %d\n", iterations*2, depth, check);
	}
	io.writef("long lived tree of depth %d\t check: %d\n", maxdepth, ItemCheck(longlivedtree));
#{
#}
}
