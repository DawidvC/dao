load help;

@[name]
dao.guide
@[name]

@[title]
简明指南
@[title]

@[text]

本指南将简明快速地介绍道语言编程的一些基本方面。


@[section]
基础
@[section]


我们将从经典的@[green]世界你好@[green]例子开始。


@[subsection]
世界你好
@[subsection]

在屏幕简单地打印“世界你好”，可使用，
@[code]
io.write( "Hello world!" )
@[code]
这个例子使用了内置的模块@[green]io@[green]来访问输出输入(IO)功能。
@[green]write()@[green]是@[green]io@[green]模块提供的一个方法，
可用来在标准输出打印。在道里，字符串通常由单引号或双引号来引用表示。
道语言命令语句后面通常可加也可不加分号。



@[subsection]
运行程序
@[subsection]

道支持三种方式运行。
最通常的方式是将代码写入一个文件（hello_world.dao），
然后在命令行使用道解释器执行：
@[code]
$$ dao hello_world.dao
@[code]

另一种方式是将代码直接从命令行传给道解释器：
@[code]
$$ dao -e "io.write( 'Hello world!' )"
@[code]

最方便学习的执行方式是交互式执行。
从命令行，不加任何参数执行道解释器，将进入交互模式。
@[code]
$$ dao

  Dao Virtual Machine 2.0
  Built date: Jun 12 2014
  Changeset ID: FOS.4d5eb15f0e53

  Copyright(C) 2006-2014, Fu Limin
  Dao is released under the terms of the Simplified BSD License
  Dao Language website: http://www.daovm.net

(dao) 
@[code]
如果你道解释器安装正常，使用交互模式运行道将自动
载入帮助文件。并显示如下信息（或者此信息的英文版）：
@[code]
  帮助模块已载入。
  现在您可以使用"help()"来列出所有可用的帮助条目;
  或者运行"help('help')"来获得此帮助系统的详细信息。
@[code] 
如果你查看的是此帮助的网页版，你可以使用一下命令在交互模式下查此帮助:
@[code]
(dao) help( 'dao.guide' )
@[code]

这些在线帮助有两个语言版本：中文和英文。
选择语言请使用：
@[code]
(dao) help::set_language("zh")  # 选择中文；
(dao) help::set_language("en")  # 选择英文；
@[code]



@[subsection]
注释代码
@[subsection]

给自己的代码加注释通常是个好习惯。
道语言支持单行和多行注释。
单行注释以@[green]#@[green]开始，直到行末；
多行注释以@[green]#{@[green]开始，@[green]#}@[green]结束。
例如：
@[code]
# 这个是单行注释例子：
io.write( "Hello World!" #{ 代码中注释 #} );
#{
这里是多行注释例子。
这里是多行注释例子。
#}
@[code]




@[subsection]
常量，变量和定变量
@[subsection]

道支持显式地申明常量，局域变量，静态变量，全局变量和定变量(Invariable)。
常量可由关键词@[green]const@[green]申明：
@[code]
const DEFAULT_INDEX = 123
const DEFAULT_NAME  = 'abc'
@[code]
常量只能由常量表达式来初始化。顶层作用域申明的常量将是全局常量。


关键词@[green]var@[green]可用来申明局域或全局变量。
同样顶层作用域申明的变量将是全局变量，其他的将是局域变量。
@[code]
var current_index = 456    # 全局变量;
var current_name  = 'def'  # 全局变量;
if( current_index ) {
	var temp_index = current_index  # 局域变量;
}
@[code]

在每个可以使用@[green]var@[green]的地方，@[green]invar@[green]也可被使用，
以申明局域，全局或成员定变量。
定变量是一种特殊的变量，它的值一旦被初始化就不能被修改了。
@[code]
var   varlist = { 123 }
invar invlist = varlist

invlist.append( 456 )  # 错误!
@[code]
详情请参看@[node]dao.data.invar@[node]。


另一种变量是使用关键词@[green]static@[green]申明的静态变量。
非类成员的静态变量实际上是个仅在其申明的作用域（局域）可见的全局变量。
因此，函数里的静态变量是保存在函数之外，且每次函数运行时所访问的静态变量
都是同一个变量。静态变量必须用常量来初始化。


如果没有上述关键词来限定，以@[code]name=expression@[code]形式声明的新量
都将是局域变量。如果该变量已被声明，该命令语句会将该变量重新赋值。
要避免这样，关键词@[green]var@[green]必须被显式地使用。
@[code]
var index = 789
for( i = 1 : 3 ){
	var index = 123  # 循环内局域变量；
}
@[code]

详情请参看@[node]dao.data@[node]。

@[red]
提示：在交互模式下，所有顶级作用域声明的变量都将变成全局变量。
@[red]


@[subsection]
类型标注
@[subsection]

在以上例子中，那些常量，变量和定变量都没有被声明类型信息。
它们的类型将通过自动推导来获得。
很多情况下，给常量，变量和定变量标注类型信息将很有好处。
有适当类型标注的程序将更易读懂和理解。当然它也将程序的
错误检测更容易。


类型标注一般被放在变量名后面，并加冒号分开。
@[code]
const vector:  array<float> = [ 12.5, 34.6 ]
invar invlist: list<float> = { 12.5, 34.6 }
var   varlist: list<int>
@[code]
这里如果没有类型标注，"vector"将成为类型为"array<double>"的数值数组。
而且"varlist"的声明没有初始化信息，它的类型信息将没法被自动推导出。


在后面你将看到，类型标注也可用在函数原型和类成员数据上。
详情请参看@[node]dao.type@[node]。




@[section]
基本类型
@[section]

为了方便编程，道对一些通用的数据类型有比较好的支持。
这些数据类型包括几种数字类型，枚举符号，字符串，数值数组，
元组，列表和关联表等。


@[subsection]
数字类型
@[subsection]

道对以下数字类型有原生支持：@[green]int@[green]，@[green]float@[green]，
@[green]double@[green]和@[green]complex@[green]。
道里面，整数和浮点数的表示方式跟其他语言类似。
值得注意的是，道里面浮点数是以双精度处理的。
要使用单精度浮点数，数字后面必须带有@[green]F@[green]后缀
（双精度使用@[green]D@[green]后缀）。
带@[green]C@[green]后缀的数字表示复数的纯虚部。


例子：
@[code]
I1 = 123     # 10进制整数;
I2 = 0xabc   # 16进制整数;
F1 = 456.7F  # 带F后缀的单精度浮点数;
F2 = 123e4   # 使用小写e科学记数的单精度浮点数;
D1 = 123D    # 带D后缀的双精度浮点数;
D2 = 456.7   # 缺省单精度浮点数: 456.7D;
D3 = 123E4   # 使用大写E科学记数的双精度浮点数;
C1 = 123C    # 双精度复数，实部0.0，虚部123;
C2 = 456.6C  # 双精度复数，实部0.0，虚部456.6;
@[code]

这些数字类型支持大部通常的运算符。例如以下算术运算符都被支持：
@[green]+@[green] (加法，正号), @[green]-@[green] (减法，负号),
@[green]*@[green] (乘法) 和@[green]/@[green] (除法)等。
@[code]
I1 = 123 + 456
I2 = 789 % 123
F1 = 123.5 ** 3
D1 = 789.5D / 123
C1 = 12.3 + 45.6C
@[code]

详情请参看
@[node]dao.type.int@[node]，@[node]dao.type.float@[node]，
@[node]dao.type.double@[node]和@[node]dao.type.complex@[node]。


@[subsection]
枚举符号
@[subsection]

一个枚举类型@[green]enum@[green]定义了一组名称符号，其中每个符号表示一个特定的整数值。
这个类型对于表示一组状态或标识特别有用。
@[code]
enum MyEnum
{
	AA    ,  # 0
	BB = 3,  # 3
	CC       # 4
}
@[code]
这些符号只能通过相应的枚举类型来访问，
应为它们并没有出现在当前的命名空间。
@[code]
a = MyEnum::AA  # Or: MyEnum.AA;
@[code]


但是，道语言里支持一种称作符号特殊的枚举类型。这种符号是由
普通的标识符前加货币符号@[green]$@[green]构成。
它们通常是与枚举类型一起使用。
@[code]
enum E1 { AA=1, BB=2 }
enum E2 { AA=10, BB=20 }

var e1: E1 = $AA
var e2: E2 = $AA

io.writeln( e1 )  # Output: $AA(1)
io.writeln( e2 )  # Output: $AA(10)
@[code]
尽管是同一个符号，"$AA"在分别赋给"e1"和"e2"时，被自动地做了不同的处理。
在赋给"e1"时，"$AA"以等同E1::AA处理，而在赋给"e1"时，"$AA"以等同E2::AA处理。
因此符号所表达的东西将取决于它被用作的枚举类型。


使用枚举类型的另一种方式是使用美剧类型的类型名：
@[code]
var e1: enum<AA,BB> = $AA
var e2: enum<AA=10,BB=20> = $BB
@[code]

枚举类型还被细分为不同的子类型以支持不同的操作。
详情请参看@[node]dao.type.enum@[node]。




@[subsection]
字符串
@[subsection]

道语言字符串由一组字节组成，可存储任何数据。
但在当作文本处理是，它一般会当UTF-8编码处理。
字符串常量可由单引号或双引号引用的一组字符来表示。
@[code]
S1 = 'Something'
S2 = "道语言"
S3 = 'It\'s green'
S4 = "\u9053\u8bed\u8a00" # the same as S2: "道语言";
@[code]
在字符串常量里，有些字符必须使用反斜杠以转义符的方式表示。
其他的如@[green]\u@[green]则将跟着的数字转义为特定的字符。


如果要使用字符串常量而不处理转义字符，此字符串常量必须用@[green]verbatim@[green]
字符串表示。这类字符串由一对相同的以@[green]@[]@[green]形式出现的组合字符标记
引用。此方括号之间可包括任意多的字母，数字，下划线，空白字符，点，冒号，减号
和等号，以保证这个组合字符标记不出现在字符穿内容之中。
@[code]
# C++ codes as verbatim string:
cpp =
@[cpp x]
class AA
{
	int index;
};
struct BB{};
@[cpp x]
@[code]

字符串的内容可通过下标访问或修改：
@[code]
str = "ABCDEFGHIJK";

io.writeln( str[1] )    # the second character;
io.writeln( str[:4] )   # the substring from the start to the 4th character;
io.writeln( str[6:] )   # the substring from the 6th character to the end;
io.writeln( str[3:8] )  # the substring from the 3rd to the 8th character;

str[1] = "X";        # Change a single byte: str = "AXCDEFGHIJK";
str[2:5] = "123456"  # Change a substring: str = "AB123456GHIJK";
@[code]

字符串也可通过@[green]+@[green]或@[green]+=@[green]连接：
@[code]
str = "ABCDEFGHIJK";

str2 = str + "123"  # str2 = ABCDEFGHIJK123
str += "123" # Append a string: str = ABCDEFGHIJK123
str += 88    # Append a character: str = ABCDEFGHIJK123X
@[code]

道字符串类型还支持一系列方法以方便处理字符串数据。
这些方法还包括了字符串模式匹配相关的方法。
详情请参看@[node]dao.type.string@[node]。




@[subsection]
数值数组
@[subsection]

Dao has built-in support for multi-dimensional numeric arrays.
Such arrays can be defined by using the squared brackets
@[green][]@[green] or @[green]array{}@[green].
Using such constructs, one can either enumerate all the elements
as a vector/matrix, or specify an arithmetic progression with
a start value, a step value and the number of steps.
If the step value is omitted, it will be assumed to be zero.

@[code]
vec1 = [1, 2, 3]            # array<int> vector, or 1x3 matrix;
vec2 = [1.0; 2; 3]          # array<float> 3x1 matrix, or transposed vector;
mat1 = [1D, 2; 3, 4]        # array<double> 2x2 matrix;
mat2 = [ [1, 2], [3, 4] ]   # 2x2 matrix
mat3 = array{ 1, 2; 3, 4 }  # 2x2 matrix
@[code]

Like string, array support sub-indexing and slicing:
@[code]
mat = [ 1, 2, 3; 4, 5, 6; 7, 8, 9 ];  # 3x3 matrix;

rowvec = mat[1,:]  # the second row;
colvec = mat[:,1]  # the second column;

submat1 = mat[:1,:]  # the first two rows;
submat2 = mat[:,1:]  # the last two columns;
submat3 = mat[:1,1:] # intersection between the first two rows and the last two columns;

mat[0,:]  = [11, 22, 33]  # set the first row to [11, 22, 33];
mat[:,1] += [11, 22, 33]  # add [11, 22, 33] to the second column;
mat[:,1] += 100           # add 100 to the second column;

mat[:1,1:] += [10, 20; 30, 40]  # add [10, 20; 30, 40] to sub-matrix of mat;
@[code]

Please see @[node]dao.type.array@[node] for more information.




@[subsection]
Lists
@[subsection]

List can be created in similar ways as array, by enumerating elements or specifying
an arithmetic progression, but using @[green]{}@[green] or @[green]list{}@[green]
instead of @[green][]@[green] or @[green]array{}@[green].

@[code]
list1 = { 1, 2, 3 }    # list<int>
list2 = { 1.0, 2, 3 }  # list<float>
list3 = { 1 : 2 : 5 }  # list<int>

list4 = { 'abc', 'def' }  # list<string>
list5 = { 123, 'abc' }    # list<any>
@[code]

List also supports sub-indexing and slicing:
@[code]
alist = { 0, 1, 2, 3, 4, 5 }

item = alist[1]
sublist = alist[2:4]

alist[3]  = 10
alist[4] += 10
@[code]





@[subsection]
Maps and Hash Maps (Associative Arrays)
@[subsection]

A map or hash map organizes a set of key/value pairs into a structure
for efficient lookup. The keys in a map are ordered, while the keys
in a hash map are unordered.


A map can be created using @[green]{key=>value...}@[green] or
@[green]map{key=>value...}@[green]. Replacing the @[green]=>@[green]
with colon @[green]->@[green] will create hash maps.
Map and hash map can be used in identical ways.
@[code]
amap  = { 'abc' => 123, 'def' => 456 }
ahash = { 'abc' -> 123, 'def' -> 456 }

amap  = map{ 'abc' => 123, 'def' => 456 }
ahash = map{ 'abc' -> 123, 'def' -> 456 }
@[code]

Sub-scripting and slicing are also supported for map to access value(s)
through key(s).
@[code]
amap = { 'abc' => 123, 'def' => 456, 'ghi' => 789 }

value  = amap[ 'abc' ];
submap = amap[ 'abc' : 'def' ];
@[code]






@[subsection]
Tuples
@[subsection]

Tuple is a data type that can store a fixed number of items with individual
type annotation for each item. Each item may optionally have a field name.
They can be created in similar ways as creating lists and maps,
but using @[green]()@[green] instead.
@[code]
tup1 = ( 123, 'abc' )               # tuple with unnamed items;
tup2 = ( index => 123, 'abc' )      # the first item is named as "index";
tup3 = tuple{ 123, name => 'abc' }  # the second item is named as "name";
@[code]

Each item of a tuple can be accessed using its index or field (item name).
New tuples can be created from other tuples by slicing.
@[code]
tup = ( index => 123, 'abc', [1,2,3] )

id = tup[0]
id = tup.index
tup.index = 456

tup2 = tup[:1]  # ( index => 123, 'abc' )
@[code]




@[section]
Control Constructs
@[section]

The logic of a program is mostly expressed with constrol constructs.
Dao supports the commonly used controls such as:
@[green]if-else@[green], @[green]for@[green], @[green]while@[green],
@[green]do-while@[green], @[green]switch-case@[green], 
@[green]break@[green] and @[green]skip@[green] etc.


@[subsection]
If-Else
@[subsection]

The @[green]if-else@[green] control allows the program to branch
and execute different blocks of codes, based on the results
of the condition expressions.


When the execution reachs an @[green]if-else@[green] block,
the condition in the @[green]if()@[green] clause will be tested first,
if the test is successful, the block associated with the @[green]if@[green] clause
will be execute. Otherwise the next @[green]if else()@[green] clauses
(if any) will be tested one by one, until one succeeds the test,
then the block of the succeeded @[green]if else()@[green] clause will be executed.
If none of the conditions suceeds and 
there is an @[green]else@[green] clause,
its block will be executed instead.
@[code]
if( rand(10) > 7 ){
	io.writeln( "greater than 7" )
}else if( rand(10) > 5 ){
	io.writeln( "greater than 5" )
}else if( rand(10) > 3 ){
	io.writeln( "greater than 3" )
}else{
	io.writeln( "not greater than 3" )
}
@[code]

Before each condition expression, there can be an optional expression
or variable declaration, for example,
@[code]
if( rnd = rand(100); rnd > 50 ) io.writeln( "random number:", rnd );
@[code]






@[subsection]
For
@[subsection]

Dao supports three different styles of for loops:
@[list]
-- For-in loop;
-- Arithmetic-progression (range) for loop;
-- Three-expression for loop (C style);
@[list]


For-in loop can normally used to iterate over the items of a container object.
It is probably most useful with list.
@[code]
numbers = { 1, 2, 3, 4, 5 }
for( num in numbers ) io.writeln( num )
@[code]


A range for loop uses an arithmetic progression condition to control the loop.
The arithmetic progression condition usually consists of an initial value,
an optional step value and a stopping value.
@[code]
for( index = 1 : 2 : 10 ) {
	io.writeln( index )
}
for( index = 1 : 10 ) {  # step value = 1;
	io.writeln( index )
}
@[code]
The loops will start with "index=1", and with each loop cycle, "index" is increased
by two or one, when "index" become greater than 10, the loop will stop.


C-style for loop is the most flexible for loop construct.
@[code]
for( init; condition; step ){
   block;
}
@[code]
The execution sequence of @[green]for@[green] statement is the following:
@[list]
== execute initial expression @[cyan]init@[cyan], and goto 3;
== execute @[cyan]step@[cyan];
== evaluate the condition expression @[cyan]condition@[cyan];
== check the value of @[cyan]condition@[cyan]: if true, goto 5; otherwise, goto 6;
== execute @[cyan]block@[cyan], and goto 2;
== stop looping; and start to execute the statements after the loop body.
@[list]


Example,
@[code(dao)]
for(i=0; i<3; ++i){
   io.writeln( i );
}
@[code(dao)]





@[subsection]
While
@[subsection]

@[green]while@[green] is a simple looping construct that executes a block
of code repeatedly as long as its condition is true.
@[code]
while( expression ){
   block;
}
@[code]
If @[cyan]expression@[cyan] is true, @[cyan]block@[cyan] is executed and repeated 
until @[cyan]expression@[cyan] becomes false,
namely, while @[cyan]expression@[cyan] is true, execute @[cyan]block@[cyan].

@[code]
i = 0;
while( i < 5 ){
   io.writeln( i );
   i += 1;
}
@[code]





@[subsection]
Do-While
@[subsection]

@[code]
do {
	block;
} while ( condition )
@[code]
Execute @[cyan]block@[cyan], and then repeat executing it
as long as the @[cyan]condition@[cyan] is true.





@[subsection]
Switch-Case
@[subsection]

Switch-case control provides a convenient way to branch the code and choose a block of code to
execute based on the value of a object.
@[code]
switch( value ){
case C_1 : block_1
case C_2 : block_2
case C_3 : block_3
...
default: block0
}
@[code]
If the @[cyan]value@[cyan] equals to @[cyan]C_i@[cyan], @[cyan]block_i@[cyan] will be executed. Here @[cyan]C_i@[cyan] must be a constant,
but they can be of different types, that means, you can mix numbers and strings as case values.
Unlike in C/C++, no @[green]break@[green] statement is required to get out of the @[green]switch@[green].


If you want to execute the same block of codes for different case values, you just need to
organize them together in the following way:
@[code]
switch( value ){
case C1, C2, C3 :
    block3
...
default: block0
}
@[code]
Namely, Dao allows one case entry to have multiple values.
In this way, @[cyan]block3@[cyan] will be executed for case values @[cyan]C1,C2@[cyan] and @[cyan]C3@[cyan].
As a simple example,
@[code(dao)]
a = "a";
switch( a ){
case 1, "a" : io.write("case 1 or a");
default :  io.write("case default");
}
@[code(dao)]





@[subsection]
Break and Skip
@[subsection]

@[green]break@[green] can be used to exit a loop, and @[green]skip@[green] can be used 
to skip the rest part of script and start the next cycle of a loop.
@[green]skip@[green] is equivalent to @[green]continue@[green] in C/C++.

@[code] 
for( i=0; i<5; ++i ){
	io.writeln( i ); 
	if( i == 3 ) break;
}
@[code]





@[section]
Routines (Functions)
@[section]

Routine (function) is a relative independent block of code that can be
repeatedly executed by invoking it when and where it is needed.
It can accept parameters to changes its behaviour.
It may also return results to its caller.



@[subsection]
Definition
@[subsection]

Dao routines are declared with keyword @[green]routine@[green]
For example,
@[code(dao)]
routine func( first, second )
{
   first += 10;
   second += "test";
   return first, second; # return more than one results.
}

(ret1, ret2) = func( 111, "AAA" );
ret3 = func( ret1, ret2 );
@[code(dao)]
defines a function that can take two parameters as inputs,
and return two values as outputs.



@[subsection]Named Parameter@[subsection]

In Dao the function parameters are named, and parameter values can be passed in by name:
@[code]
func( first = 123, second = "ABC" );
@[code]



@[subsection]Parameter Type and Default Value@[subsection]

Routine parameters can have type annotations, and a default value can
also be specified for a parameter.
@[code]
routine MyRout( name: string, index = 0 )
{
   io.writeln( "NAME  = ", name )
   io.writeln( "INDEX = ", index )
}
@[code]
Here @[cyan]name@[cyan] is annotated as type string, and @[cyan]index@[cyan]
is specified as an integer with default value 0.
Any parameter after a parameter with default value must have default values as well.



@[subsection]Routine Overloading@[subsection]

Routine overloading by parameter types is also supported in Dao,
which means that multiple routines can be defined with the same name,
but different parameter signatures.
@[code]
routine MyRout( index: int, name = "ABC" )
{
   io.writeln( "INDEX = ", index )
   io.writeln( "NAME  = ", name )
}

MyRout( "DAO", 123 ) # invoke the first MyRout()
MyRout( 456, "script" ) # invoke the second MyRout()
@[code]



@[subsection]Anonymous Routine and Closure@[subsection]

Dao supports routines as first class objects.
So they can be created as anonymous routines or closures,
and used just like other objects.



The syntax to create anonymous routine or closure is nearly identical to
the definition of a normal function, except the following differences:
@[list]
== No need for a function name;
== Default parameter values do not need to be constant;
== Its function body may access the local variables of the outer function;
@[list]

When such function accesses local variables from its outer/upper scope,
it is created as a closure, otherwise as an anonymous function.


Here is a simple example,
@[code]
abc = "ABC";

rout = routine( x, y: string, z = abc + abc ){
    abc += y;
    io.writeln( "lambda ", abc )
    io.writeln( "lambda ", y )
    io.writeln( "lambda ", z )
}
rout( 123, "XXX" );
io.writeln( abc )  # Output: ABCXXX
@[code]

For code section routines and decorators,
please see @[node]dao.routine.section@[node] and @[node]dao.routine.decorator@[node].
For coroutine and generator, please see @[node]module.core.coroutine@[node].




@[section]
Classes
@[section]


Class is a user-defined data structure that supports data abstraction, encapsulation,
polymorphism and inheritance etc.
It is commonly used to do Object-Oriented Programming (OOP).


@[subsection]Class Definition@[subsection]

A @[green]class@[green] data strucutre is defined by composing data fields
and member methods in a meaningful way that defines the states and behaviours
for the instances of the class.
Dao class supports four types of fields:
@[list]
--@[green]constant@[green]: declared with keyword @[green]const@[green];
--@[green]static variable@[green]: declared with keyword @[green]static@[green];
--@[green]instance variable@[green]: declared with keyword @[green]var@[green];
--@[green]instance invariable@[green]: declared with keyword @[green]invar@[green];
@[list]
Such fields can be declared with or without explicit types,
and with or without default initialization values,
in the same way as specifying types and/or default values for function parameters.
For example, the following can be used for instance variables,
@[code]
var variable;
var variable = init_value;
var variable: typename;
var variable: typename = init_value;
@[code]

Class methods must be declared with keyword @[green]routine@[green] 
for constructors and normal methods, or keyword @[green]operator@[green]
	for operator overloading.


The visibilities of class fields and methods can be restricted by three permission keywords:
@[list]
--@[green]public@[green]: publically accessible without restriction;
--@[green]protected@[green]: accessible from the class and its derived classes;
--@[green]private@[green]: only accessible from the class;
@[list]

Here is a simple class,
@[code]
class ClassOne
{
	var index = 0;
	var name  : string
	var words : list<string> = {}

	routine ClassOne( name :string, index = 0 ){
		self.name = name;
		self.index = index;
	}
}
@[code]

Within class methods, the special variable @[green]self@[green] represents the current class
instance. Class methods may be declared inside class body and defined outside
in the same way as in C++, but in Dao, one should make sure that, the parameter list
must be exactly the same in the places for declaration and definition.




@[subsection]Class Instance@[subsection]

Class constructors are the methods that have name the same as the class name.
A class instance can be created by invoking a constructor of the class 
in the same way as a function call,
@[code]
object = ClassOne( 'abc' )
@[code]
Note that, the constructors are not used to create class instances,
instead, an instance is created before, and then the constructor is called
after to initialize the instance.


For a class without parent classes and without constructors, 
its instances may also be created by enumerating the members of the class,
@[code]
class Point3D
{
	var x = 0D;
	var y = 0D;
	var z = 0D;
}
point = Point3D.{ 1, 2, 3 };
@[code]
The names of instance variables may also be specified in enumeration,
@[code]
point = Point3D.{ y = 2, x = 1, z = 3 };
@[code]





@[subsection]Methods and Properties@[subsection]

There are three typical types of methods for Dao classes: static method,
instance method and invariable/const instance method.
Static methods can be invoked without class instance objects, so they cannot
access instance variables. The other two types of methods requires class instances
to invoke. Instance methods can modify the instance variables, but invariable
methods cannot. Invariable methods can be declared by specifying "invar" after
the brackets for the parameters.
@[code(dao)]
class ClassTwo
{
	private

	static state = 0
	var    value = 0

	public

	static routine Stat() {
		state += 1      # OK!
		state += value  # Error! Cannot access "value"!
	}
	routine Meth() {
		state += 1  # OK!
		value += 2  # OK!
	}
	routine InvarMeth() invar {
		state += value  # OK! Can access "value"!
		value += 2      # Error! Cannot modify "value"!
	}
}
@[code(dao)]

In order to provide access to the variables such as "value" in the above example,
one can define ordinary methods such @[cyan]GetValue()@[cyan] and @[cyan]SetValue()@[cyan].
But the better way is to use properties.
A property is a method that provides access to a field in a way
that syntatically looks like direct access.
In Dao, this can be done by overloading name specific operators such as
@[green].Name@[green] and @[green].Name=@[green]. For example,
@[code(dao)]
class MyNumber
{
	private
	var value = 0;

	public
	routine MyNumber( init = 0 ){
		value = init;
	}

	operator .value(){ return value }
	operator .value=( newval: int ) {
		value = newval;
		io.writeln( "value is set" )
	}
}

num = MyNumber( 123 )
num.value = 456
io.writeln( num.value )
@[code(dao)]





@[subsection]Inheritance@[subsection]
@[code]
class ColorRBG
{
	var red   = 0.0;
	var green = 0.0;
	var blue  = 0.0;

	routine ColorRBG( R = 0.0, G = 0.0, B = 0.0 ){
		red = R;
		green = G;
		blue = B;
	}
}

yellow = ColorRBG( 1, 1, 0 ); # create an instance.
@[code]
The following will define a derived class of @[cyan]ColorRBG@[cyan],
@[code]
class ColorRGBA : ColorRBG
{
	var alpha = 0.0; # alpha component for tranparency.

	routine ColorRGBA( R = 0.0, G = 0.0, B = 0.0, A = 0.0 ) : ColorRBG( R, G, B ){
		alpha = A;
	}
}

magenta = ColorRGBA( 1, 0, 1, 0 ); # not tranparent.
magenta.alpha = 0.5; # change to half tranparency.
@[code]

In the definition of derived class,
the parent class @[cyan]ColorRBG@[cyan] should be put after the derived class 
and be separated with @[green]:@[green]. 
The constructor parameters for derived class
can be passed to parent classes in the way as shown in the example.


There are several more advanced features based on class,
please see @[node]dao.class@[node] for more information.




@[text]
