load help;

@[name]
dao.type.map
@[name]

@[title]
Map or Hash Map Container Type
@[title]

@[text]
Dao supports map and hash map as a  single type @[green]map@[green].
A map contains ordered keys, while a hash map contains unordered keys.
They can be created by enumeration in almost the identical way, except that
@[green]=>@[green] is used for map and @[green]:@[green] is used for hash map.

@[subsection]Definition@[subsection]
@[code(syntax)]
MapKeyValueList ::= Expression => Expression { ',' Expression => Expression }
HashKeyValueList ::= Expression : Expression { ',' Expression : Expression }

MapEnumeration  ::= [ 'map' ] '{' MapKeyValueList '}'
HashEnumeration ::= [ 'map' ] '{' HashKeyValueList '}'

Map ::= MapEnumeration | HashEnumeration
@[code(syntax)]


@[text]



@[name]
dao.type.map.method
@[name]

@[text]
@[code]
clear( self :map<any,any> )
reset( self :map<any,any> )
reset( self :map<any,any>, hashing :enum<none,default,random> )
erase( self :map<any,any> )
erase( self :map<@K,@V>, from :@K )
erase( self :map<@K,@V>, from :@K, to :@K )
insert( self :map<@K,@V>, key :@K, value :@V )
find( self :map<@K,@V>, key :@K, type :enum<le,eq,ge>=$eq )=>tuple<key:@K,value:@V>|none
keys( self :map<@K,any>, from :@K )=>list<@K>
keys( self :map<@K,any>, from :@K, to :@K )=>list<@K>
values( self :map<@K,@V>, from :@K )=>list<@V>
values( self :map<@K,@V>, from :@K, to :@K )=>list<@V>
has( self :map<@K,any>, key :@K )=>int
size( self :map<any,any> )=>int

iterate( self :map<@K,@V> )[key :@K, value :@V]
count( self :map<@K,@V> )[key :@K, value :@V =>int] =>int
keys( self :map<@K,@V> )[key :@K, value :@V =>int] =>list<@K>
values( self :map<@K,@V> )[key :@K, value :@V =>int] =>list<@V>
select( self :map<@K,@V> )[key :@K, value :@V =>int] =>list<tuple<key:@K,value:@V>>
find( self :map<@K,@V> )[key :@K, value :@V =>int] =>tuple<key:@K,value:@V>|none
map( self :map<@K,@V> )[key :@K, value :@V =>@T] =>list<@T>
apply( self :map<@K,@V> )[key :@K, value :@V =>@V] =>map<@K,@V>
@[code]
@[text]
