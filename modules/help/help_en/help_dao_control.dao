load help;

@[name]
dao.control
@[name]

@[title]
Control Constructs
@[title]

@[text]

Control constructs are essential for a program to do complex work.
Dao supports the common controls such as:
@[green]if-else@[green], @[green]for@[green], @[green]while@[green],
@[green]do-while@[green], @[green]switch-case@[green], 
@[green]break@[green] and @[green]skip@[green] etc.

@[text]





@[name]
dao.control.if-else
@[name]

@[title]
If-Else Conditional Control
@[title]

@[text]

The @[green]if-else@[green] control allows the program to branch
and execute different blocks of codes, based on the results
of the condition expressions.


@[subsection]
Definition
@[subsection]

@[code(syntax)]
ControlBlock ::= Statement | '{' [ StatementBlock ] '}'

IfElseStmt ::= 'if' '(' [ LocalVarDeclaration ';' ] Expression ')' ControlBlock
               { 'else' 'if' '(' [ LocalVarDeclaration ';' ] Expression  ')' ControlBlock }
			   [ 'else' ControlBlock ]
@[code(syntax)]


@[subsection]
Use Cases
@[subsection]


@[subsubsection]
Single Statement
@[subsubsection]
This is the simplest use case of "if".
@[code]
if( condition ) statement
@[code]
Where the "statement" is executed only if the "condition" evaluated to
a value that can pass the condition test (such as nonzero values).



@[subsubsection]
Single Block 
@[subsubsection]
If multiple statements need to be executed if the "if" test is true,
a pair of braces can be used to group these statements into a block.
Of course, such block can also nest other blocks.
@[code]
if( condition ) {
	block
}
@[code]


@[subsubsection]
Else Statement or Block
@[subsubsection]
If there is another statement or block should be executed when the condition
test failed, one can add the "else" clause to the if statement.
@[code]
if( condition )
	statement1
else
	statement2

if( condition ) {
	block1
} else {
	block2
}
@[code]
Please note that, the braces are needed only if the block constains more than
a single statement.


@[subsubsection]
Multiple Conditions and Blocks
@[subsubsection]

If there are multiple conditions to be tested for multiple statements or blocks,
the "if else" clause can be used.
@[code]
if( condition1 ){
   block1;
}else if( condition2 ){
   block2;
}else{
   block3;
}
@[code]

If @[cyan]condition1@[cyan] is true, @[cyan]block1@[cyan] is executed;
otherwise, if @[cyan]condition2@[cyan] is true, @[cyan]block2@[cyan] is executed;
otherwise, @[cyan]block3@[cyan] is executed; zero or more @[green]else if@[green]
and zero or one @[green]else@[green] statement can be used.


@[subsubsection]
Optional Declaration
@[subsubsection]
Before each condition expression, there can be an optional variable declaration.
@[code]
if( declaration; condition ) {
	block
}
@[code]

For example,
@[code]
if( rnd = rand(100); rnd > 50 ) io.writeln( "random number is >50" );
if( var rnd = rand(100); rnd > 50 ) io.writeln( "random number is >50" );
@[code]


@[subsection]
Examples
@[subsection]


@[code(dao)]
a = 5
if( a > 1 ) io.writeln( 'a > 1' )

if( a > 2 )
	io.writeln( 'a > 2' )
else
	io.writeln( 'a <= 2' )

if( a < 3 )
	io.writeln( 'a < 3' )
else if( a < 4 )
	io.writeln( 'a < 4' )
else
	io.writeln( 'a >= 4' )
@[code(dao)]


@[text]





@[name]
dao.control.for
@[name]

@[title]
For Looping Control
@[title]

@[text]

Dao supports three different styles of for loops:
@[list]
-- Three-expression for loop (C style);
-- Arithmetic-progression for loop;
-- For-in loop;
@[list]

@[subsection]
Definition
@[subsection]
@[code(syntax)]
CFor  ::= 'for' '(' [ LocalVarDeclaration ] ';' [ Expression ] ';' [ ExpressionList ] ')'
              ControlBlock

APFor ::= 'for' '(' ['var'|'invar'] Identifier '=' Expression ':' [Expression ':'] Expression ')'
              ControlBlock

ForIn ::= 'for' '(' ['var'|'invar'] Identifier 'in' Expression {';' Identifier 'in' Expression} ')'
              ControlBlock

ForStmt ::= APFor | CFor | ForIn
@[code(syntax)]


C-style for loops:
@[code(dao)]
for( i = 0;  i < 10;  ++i ) io.writeln( i );

for( var i = 0;  i < 10;  ++i ) io.writeln( i );

for( var i, j = 0;  i < 10;  ++i, j+=2 ) io.writeln( i, j );

for( i, j = 0, k = 3;  i < 10;  ++i, j+=2 ) io.writeln( i, j, k );
@[code(dao)]


Arithmetic progression for loops:
@[code(dao)]
for( i = 1 : 10 ) io.writeln( i )

for( var i = 1 : 10 ) io.writeln( i )
@[code(dao)]


For-in loops:
@[code(dao)]
m = { 'def' => 123, 'cdf' => 789, 'abc' => 345 }

for( kv in m ) io.writeln( kv )

for( k in m.keys(); v in m.values() ) io.writeln( kv )

for( var k in m.keys(); v in m.values() ) io.writeln( kv )
@[code(dao)]


@[text]





@[name]
dao.control.while
@[name]

@[title]
While Looping Control
@[title]

@[text]

@[subsection]
Definition
@[subsection]
@[code(syntax)]
WhileStmt ::= 'while' '(' [ LocalVarDeclaration ';' ] Expression ')' ControlBlock
@[code(syntax)]

@[code(dao)]
i = 0
while( i < 10 ) i += 1
@[code(dao)]


@[text]





@[name]
dao.control.do-while
@[name]

@[title]
Do-While Looping Control
@[title]

@[text]

@[subsection]
Definition
@[subsection]
@[code(syntax)]
DoWhileStmt ::= 'do' ControlBlock 'while' '(' Expression ')'
@[code(syntax)]

@[code(dao)]
i = 0
do
	i += 1
while( i < 10 )

do {
	i += 1
	io.writeln( i )
} while( i < 15 )
@[code(dao)]


@[text]





@[name]
dao.control.switch-case
@[name]

@[title]
Switch-Case Control
@[title]

@[text]

@[subsection]
Definition
@[subsection]
@[code(syntax)]
SwitchCaseStmt ::= 'switch' '(' Expression ')' '{'
                   { 'case' Expression [ ( ',' | '...' ) Expression ] ':' ControlBlock }
				   [ 'default' ':' ControlBlock ]
                   '}'
@[code(syntax)]
@[comment]
ConstExpressioin for case
@[comment]

@[code(dao)]
switch( 2 ){
case 0 : io.writeln( 'case 0' )
case 1 : io.writeln( 'case 1' )
case 2 : io.writeln( 'case 2' )
default: io.writeln( 'default' )
}
@[code(dao)]


@[text]
