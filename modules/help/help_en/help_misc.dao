load help;




############################################################
#### Installation
############################################################


@[name]
misc.installation
@[name]

@[title]
Installation
@[title]


@[text]


@[subsection]
Compiling and Building
@[subsection]

The recommended way to compile Dao is to run the following from
the shell:
@[code]
$ make -f Makefile.daomake PLATFORM
@[code]
where PLATFORM can be one of the followings:
@[list]
-- linux
-- macosx
-- freebsd
-- mingw
-- minix
-- haiku
@[list]

Dao uses DaoMake, which is a make tool based on Dao
(see @[node]tool.standard.daomake@[node]),
as the default building system.
Running the above make command will make a bootstrap build of DaoMake,
and then use the bootstrapped DaoMake to configure a full build of 
Dao and its modules and tools and generate appropriate make files
for building and installation.


@[subsection]
Customized Building
@[subsection]

Build mode (release, debug or profile) and installation directory
can be set by: 
@[code]
$ make -f Makefile.daomake PLATFORM MODE=debug INSTALL=directory
@[code]


Out of source building can be done by executing the following
from the build directory:
@[code]
$ make -f DAO-DIR/Makefile.daomake PLATFORM SRCDIR=DAO-DIR
@[code]

Please read Makefile.daomake for more options such as making
static build and compiling to JavaScript etc.



@[subsection]
Installation
@[subsection]

Simply run the following to install,
@[code]
$ make install
@[code]

@[text]






############################################################
#### Comparisons
############################################################



@[name]
misc.comparison
@[name]

@[title]
Comparisons between Dao and Other Languages
@[title]


@[text]
@[text]




@[name]
misc.comparison.typing
@[name]

@[title]
Optional VS Duck Typing (Python)
@[title]


@[text]


@[subsection]
Type Checking
@[subsection]


Duck typing offers much flexibility in programming,
but it lacks of compiling time type safety checking.
As a result, even obvious type errors cannot be detected
at compiling time by an interpreter or compiler for
a duck typing language.
This problem can be well illustrated by the following
example in Python,
@[code]
def SomeFunction(a, b):
    return a * b

SomeFunction( 'abc', 'def' )  # Running time error!
@[code]
Since not all the execution paths can be covered by testing,
some bugs caused by such simple typing errors may go undetected.



But such error can be easily detected with type inference
and function specialization in an optional typing language
such as Dao. 
For example, the following will raise a compiling error
for the second function call,
@[code]
routine SomeFunction( a, b )
{
	return a * b
}
SomeFunction( 123, 456 )      # No error.
SomeFunction( 'abc', 'def' )  # Compiling time error!
@[code]
In this example, even though the parameter types of @[green]SomeFunction()@[green]
are not explicitly specified, but at its call sites, the types of the arguments
for the calls can be inferred. Using these type information, Dao interpreter
will specialize @[green]SomeFunction()@[green] into two functions, one for
@[green]int@[green] and @[green]int@[green] parameters, the other for
@[green]string@[green] and @[green]string@[green] parameters. 


The first call is valid because the specialized function will do 
integer-integer multiplication. But the second call is not, 
because it attempts to do string-string multiplication, 
which is not a valid operation. Because such function
specialization and type checking is done at compiling time,
such errors can be easily detected at compiling time.



@[subsection]
Explicit Typing
@[subsection]


Another problem with duck typing is that explicit types cannot be specified
to make codes clearer and more readable.
For example, in Python, without looking into the documentations for a function,
or the implementation of the function, it may be very difficult to guess what
are the correct parameter types for the function.


But in Dao with optional typing, one can write a function in the following way,
@[code]
routine SomeFunction( a :float, b :float )
{
	return a * b
}
@[code]
This will make it clear that this function will accept two floats as parameters.
Such explicit parameter type specification is also very helpful in creating
bindings for C/C++ functions, because this will guarantee that the parameters
passed to the functions are of the expected types, so it can save a lot of
boilerplate codes for type checking (and conversion in some cases).


@[text]





@[name]
misc.comparison.enumsym
@[name]

@[title]
Enum Symbols (C++,Ruby)
@[title]


@[text]

Dao supports a data type that is roughly a combination 
of C++ enum and Ruby symbol types.
Like in C++, enum symbol in Dao can be declared in the
following way,
@[code]
enum Boolean { False, True }
@[code]
And zero will be associated with @[green]False@[green]
and one will be associated with @[green]True@[green].


But unlike in C++, this will not add integer constants named 
@[green]False@[green] and @[green]True@[green], so they have
to be accessed in the following way,
@[code]
bl1 = Boolean::False
bl2 = Boolean::True
@[code]
To use @[green]False@[green] and @[green]True@[green] as integer
constants as in C++, one may do,
@[code]
use enum Boolean
@[code]


However, the more convenient way to use this type is to use them as symbols.
A symbol is an identifier prefixed with a dollar symbol.
A symbol is a like a "polymorphic" enum: it can be used freely without
being fixed to a particular enum type, but its actually value will depend
on the type of the variable that holds it.


For example,
@[code]
enum EnumRF{ Real, False }

A = $False

B : Boolean = $False
C : EnumRF  = $False
@[code]
Here @[green]A@[green] will hold a free symbol @[green]$False@[green]
with value @[green]zero@[green].
And @[green]B@[green] will hold a symbol @[green]$False@[green] of 
type @[green]Boolean@[green] with value @[green]zero@[green].
And @[green]C@[green] will hold a symbol @[green]$False@[green] of 
type @[green]EnumRF@[green] with value @[green]one@[green].


The main difference between Dao enum symbol and C++ enum and Ruby symbol
is this polymophic behavior of Dao enum symbol.
Another important difference is that Dao enum symbol is trictly typed,
while the others are not.


@[text]





@[name]
misc.comparison.codesect
@[name]

@[title]
Code Block Method (Ruby)
@[title]


@[text]

Ruby supports a special type of functions called @[green]code block method@[green],
which can accept a block of codes as an addtional and implicit parameter.
Dao also supports such method in a similar way, and such method
is also often called @[green]code section method@[green] in Dao,
that because there is a significant difference between the implementation of
such methods in Dao and in Ruby.


In Ruby, the code block attached to a call is compiled and passed to the call
as a closure. But in Dao, the code block is compile as a part (section) of
the host (caller) function, and is not passed to the call.
Instead, the call will locate the right code section in the caller and
execute that section when necessary.
There are advantages and disadvantages of both implementation,
but the implementation as code sections should be more efficient.


The following examples should demonstrate some syntactic differences.
@[code]
# Ruby
def CodeBlock
	puts 'Starting CodeBlock'
	yield 123
	puts 'Ending CodeBlock'
end

CodeBlock { |x| puts "#{x}" }
@[code]

@[code]
# Dao
routine CodeBlock()
[ int ] # parameter type for the block;
{
	io.writeln( 'Starting CodeBlock' )
	yield( 123 )
	io.writeln(  'Ending CodeBlock' )
}

CodeBlock::{ [x] io.writeln( x ) }
@[code]

Note: code section method is not really inspired by Ruby, 
but it was evolved from the previous functional method in Dao.
Only the syntax was eventually settled down and converged to
something similar to Ruby code block method, whose syntax
seems quite appropriate for such feature.


@[text]






@[name]
misc.comparison.decorator
@[name]

@[title]
Function Decorator (Python)
@[title]


@[text]

Decorators are a special type of functions that can be used to
enhance the functionalities of other functions by decorating them.


@[subsection]
Decorators for Single Functions
@[subsection]

In Python, a decorator is just a callable that can take a function 
as an input argument and return a replacement function as output.
For example,
@[code]
def Decorator( func ):
	def newfunc():
		ret = func()
		return ret + 123
	return newfunc

def Foo():
	return 456

deco = Decorator( Foo )
deco()
@[code]


Dao decorators are quite different from Python decorators.
Dao decorators do not return replacement functions, instead,
they are defined as the templates from which the replacement functions
can be created. Such replacement functions may or may not call
the original function, this is the same as Python decorators,
but Dao decorators are typed and can be strictly typed.
So all the static type checking that can be applied to normal functions
can also be applied to decorators as well.


An equivalent Dao decorator for the above Python example is,
@[code]
routine @Decorator( func : routine< =>int > )
{
	ret = func( __args__, ... )  # call the original function;
	return ret + 123
}
routine Foo()
{
	return 456
}
deco = @Decorator( Foo )
deco()
@[code]
Where the parameter and type @[green]func : routine< =>int >@[green]
of @[green]@Decorator()@[green] indicates that this decorator can
only be applied to functions that can take no parameter and return an integer.
@[green]__args__@[green] is an automatically defined variable of tuple type
to hold the parameters that will be passed to the decorated function.
The @[green]...@[green] in the end of the argument list indicates
that the call must expand the previous tuple argument in the argument list,
namely, removing the tuple and placing its items in the argument list.


In both Python and Dao, decorators can be applied at function definition sites
in the same way.


@[subsection]
Decorators for Any Functions
@[subsection]

If one wants to define a decorator that can be applied to any functions.
In Python, one might do,
@[code]
def Decorator( func ):
	def newfunc( *args, **kwargs ):
		print "Calling with: %s, %s" % (args, kwargs)
		return func( *args, **kwargs )
	return newfunc

def Foo( a ):
	return a + 456

deco = Decorator( Foo )
deco( 123 )
@[code]
The equivalent in Dao would be,
@[code]
routine @Decorator( func : routine )
{
	io.writeln( 'Calling with:', __args__, ... )
	return func( __args__, ... )  # call the original function;
}
routine Foo( a )
{
	return a + 456
}
deco = @Decorator( Foo )
deco( 123 )
@[code]



@[subsection]
Overloaded Decorators
@[subsection]


If one wants to write a decorator for multiple type of functions,
in Python one would have to create decorators as in the above
Python examples and check the argumenet types to handle different
types of functions. Because Python does not support function overloading.


In Dao, one could simply create different decorators for different
target functions, and overload them with the same name.
For example,
@[code]
routine @Decorator( func : routine<int=>int> )
{
	return func( __args__, ... ) + 123
}
routine @Decorator( func : routine<string=>string> )
{
	return func( __args__, ... ) + 'abc'
}

@Decorator  # the first decorator will be applied;
routine Foo( a : int )
{
	return a * 100
}

@Decorator  # the second decorator will be applied;
routine Foo( a : string )
{
	return a + '##';
}

f = @Decorator( Foo )
f( 123 )
f( 'xyz' )
@[code]
When the target function is also overloaded, the decorator will be
applied to each of the overloaded functions, and create a new
(and possible also overloaded as well) function.



@[text]





@[name]
misc.comparison.overloading
@[name]

@[title]
Operator Overloading (Python)
@[title]


@[text]
@[text]





@[name]
misc.comparison.tasklet
@[name]

@[title]
Concurrency Tasklet (Go)
@[title]


@[text]
@[text]





@[name]
misc.comparison.channel
@[name]

@[title]
Communication Channel (Go)
@[title]


@[text]
@[text]





@[name]
misc.comparison.binding
@[name]

@[title]
C/C++ Function Binding (Python, Lua)
@[title]


@[text]
@[text]









############################################################
#### Benchmarking
############################################################


@[name]
misc.benchmarks
@[name]

@[title]
Benchmarks
@[title]

##Program       ## Argument ## Dao  ## Dao+JIT ## Speedup ## ## Lua   ## Python ## Go   ## C
##nbody         && 10000000 && 41.2 && 12.1    &&  3.4X   && && 103.9 && 279.8  &&  2.6 && 1.8
##fannkuch      && 11       && 57.4 && 16.5    &&  3.6X   && && 151.4 && 284.0  &&  4.4 && 2.9
##mandelbrot    && 4000     && 25.9 &&  4.3    &&  6.0X   && &&  63.7 && 137.2  && 1.3* && 2.3
##spectral-norm && 3000     && 21.7 &&  2.1    && 10.2X   && &&  78.2 && 305.7  && 1.5* && 1.9
##binary-trees  && 16       && 55.9 && 57.7    &&  1.0X   && &&  21.2 &&  20.1  &&  4.5 && 4.7


@[text]

Here are some random benchmarks which shouldn't be taken too seriously.
They are presented to give developers some rough idea what one can expect from Dao
regarding its efficiency.
@[red]These benchmarks by no means indicate the performance of these languages
in real applications.@[red]


Some of the benchmarks are taken from the 
@[link]The Computer Language Benchmarks Game@@http://benchmarksgame.alioth.debian.org@[link].
All the tested benchmarks are available here
@[link]benchmarks@@/projects/DaoBenchmarks/dir?ci=tip@[link];


The following languages are chosen for comparison,

@[table]
##Language   ##Version/Compiler
##Dao        &&2.0-devel-2013-06-23
##Lua        &&5.2.1
##Python     &&2.7.2
##Go         &&1.1
##C          &&Apple Clang V4.0 (-O2)
@[table]


The benchmarks are executed on Mac OS X 10.8.3 with 1.8GHz Intel Core i5.
In these tests, time is measured in seconds (S), and memory is measured in Mega-Bytes (M).

@[table]
##Program       ## Argument ## Dao  ## Dao+JIT ## Speedup ## ## Lua   ## Python ## C
##nbody         && 10000000 && 41.2 && 12.1    &&  3.4X   && && 103.9 && 279.8  && 1.8
##fannkuch      && 11       && 57.4 && 16.5    &&  3.6X   && && 151.4 && 284.0  && 2.9
##mandelbrot    && 4000     && 25.9 &&  4.3    &&  6.0X   && &&  63.7 && 137.2  && 2.3
##spectral-norm && 3000     && 21.7 &&  2.1    && 10.2X   && &&  78.2 && 305.7  && 1.9
##binary-trees  && 16       && 55.9 && 57.7    &&  1.0X   && &&  21.2 &&  20.1  && 4.7
##pidigits      && 5000     &&  9.2 &&  9.2    &&  1.0X   && &&  53.2 &&   3.1  && --
@[table]


The followings are a couple of benchmarks to compare Dao to Go.

Time:

@[table]
##Program           ## Test Case         ## Dao      ## Dao+JIT   ## Go
##massive-tasklets  && 100000 tasklets   && 115.8 S  && 36.5 S    && 46.4 S
##massive-messages  && 1000000 messages  &&  83.1 S  && 80.9 S    &&  0.5 S
@[table]

Memory:

@[table]
##Program           ## Test Case         ## Dao      ## Dao+JIT   ## Go
##massive-tasklets  && 100000 tasklets   && 138.0 M  && 141.0 M   && 525.0 M
##massive-messages  && 1000000 messages  &&   2.2 M  &&   5.4 M   &&   7.3 M
@[table]

@[text]
