# Copyright (c) 2012, Limin Fu
# This document is released under the GNU Free Documentation License.

load help;

load help_dao_type_number;
load help_dao_type_enum;
load help_dao_type_string;
load help_dao_type_array;
load help_dao_type_list;
load help_dao_type_map;
load help_dao_type_tuple;

@[name]
dao.type
@[name]

@[title]
Data Types and Type Annotation
@[title]

@[author]
Limin Fu
@[author]

@[license]
GNU Free Documentation License
@[license]

@[text]
Dao supports optional/hybrid typing that allows variables to be declared
with or without type annotations.
When a variable is declared without type annotation, its type will be automatically
inferred at compiling time based on some type dedcution rules if possible.
If a variable has an explicit type annotation or a successfully inferred type,
static type checking will be carried out on this variable at compiling time,
otherwise, it will be checked at running time.


@[section]Type Annotation@[section]

Type annotations in Dao are usually placed after the variable, parameter or field names
with a colon separating the names and the annotation.
@[code]
name: type
name: type = value

routine MyFunction( name: string, index: int = 1 ) { ... }

class Klass
{
	var name: type = value
}
@[code]


Multiple variables can be declared at once with the same type and initial value:
@[code]
name1, name2 : type
name1, name2 : type = value
@[code]


@[section]Data Types@[section]

Dao supports a rich set of types to allow writing expressive codes.


@[subsection]Basic Types@[subsection]

The basic types are the following:

@[table]
##Type Name  ##Type Description
##none     &&none value type
##int      &&integer type
##float    &&single precision floating point number type
##double   &&double precision floating point number type
##complex  &&complex number type
##string   &&string type
##enum     &&enum symbol type
@[table]
Though @[code]enum@[code] is a basic type, its type names may vary
and include symbol names that are associated with the enum types.
Examples,
@[code]
var name: string
var state: enum<off,on> = $on
@[code]


@[subsection]Aggregated Types@[subsection]

The essential aggregated types in Dao are the followings:

@[table]
##Type Name  ##Type Description
##array < ElementType >            &&numeric array type
##tuple < ItemTypesOrNamesTypes >  &&tuple type
##list  < ItemType >               &&list type
##map   < KeyType, ValueType >     &&map type
@[table]
These are template-like types that can take type arguments.
The type arguments usually indicate what types of values the aggregated types may contain.
For example,
@[code]
array<int>         # Array that may contain integers;
list<string>       # List that may contain strings;
map<string,int>    # Map that may contain pairs of string and int;
tuple<string,int>  # Tuple that may contain one string and one integer;

# The following is a tuple type with named items:
# The first item is named "name" and has type "string";
# The second item is named "index" and has type "int";
tuple<name:string,index:int>
@[code]


Examples of type annotations with these types,
@[code]
var vector: array<int> = [ 1, 2, 3 ]
var tuple1: tuple<string,int> = ( "abc", 123 )
var tuple2: tuple<name:string,index:int> = ( 'abc', 123 )
var names:  list<string> = { "Joe" }
var table:  map<string,int> = { "abc" => 123 }
@[code]


@[subsection]Type Holder Types@[subsection]

Type holder types are type names with a @[green]@@[green] prefix.
They represent to-be-defined types, the same type holder represents the same type
within a local context (a single composite type or a function prototype etc).
They are usually used in template-like types as place holders for type arguments,
and in the routine signatures of the methods of those types.
This way, both the types and their methods are made generic,
and can be instantiated (specialized) for particular argument types.


For example, the list template type is declared as @[code]list<@T=any>@[code],
where @[code]any@[code] is the default argument type for the list type.
This means @[code]list<>@[code] will be equivalent to
@[code]list<any>@[code].
One of the list methods is the following,
@[code]
append( self: list<@T>, item: @T, ... : @T ) => list<@T>
@[code]
Within this routine signature, all @[green]@T@[green] represent the same type.
So this method means, for a list of type @[green]list<@T>@[green]
(@[green]@T@[green] is @[green]string@[green] for example),
only items of type @[green]@T@[green] (@[green]string@[green]) can be appended to the list.


@[subsection]Other Types@[subsection]

Dao also supports a number of other types such as:
@[list]
--Routine or function types (see @[green]dao.routine@[green] for details);

--Wrapped C/C++ types (see @[green]dao.c-interface@[green] for details);

--User defined Dao class types (see @[green]dao.class@[green] for details);

--Abstract interface types (see @[green]dao.???@[green] for details);

--@[green]stream@[green] type for standard Input/Output and file Input/Output
(see @[green]dao.type.stream@[green] for details);

--Types for concurrent programming such @[green]future@[green], @[green]mutex@[green],
@[green]condition@[green] and @[green]semaphore@[green] 
(see @[green]dao.concurrent@[green] for details);

--Exception types (essentially wrapped C types).
@[list]


@[subsection]Special Types@[subsection]

@[list]
--@[green]any@[green]:

As its name suggests, it represents any type, so any value can match to this type.

@[comment]
@[green]?@[green]:

This special type name represents undefined types. Function parameters that 
have neither type annotations nor default values are automatically assigned with
this type. Some variables whose types cannot be successfully inferred are also
assigned with this type. This type can be specialized to a more specific type
when more type information is available, for example, at function call point 
(compile time or runtime), parameters passed to a function call can provide 
concrete types to specialize the function (namely, specializing parameter types, 
local variable types and virtual machine instructions).
@[comment]

--Type holder:

Type holders are type names with a @[green]@@[green] prefix.
It also represents to-be-defined types, the same type holder represents the same type
in a local context (a single composite type or a function prototype etc).
For example,

@[code]
tuple<@T,@T>
@[code]
represents a tuple type whose two items must have the same type.

@[code]
routine Func( a :@T, b :@T )
@[code]
declares a function that can only accept two parameters of the same type.


--Value type:

Constant values of basic types can also be used as types in a composite type.
For example,

@[code]
tuple<1,2>
@[code]
represents a tuple type whose first item must be @[green]1@[green] and its second
must be @[green]2@[green]!
Such types are mainly useful when dealing with C++ template types.


@[subsection]Type Aliasing@[subsection]

Type alias can be defined using the following syntax:

@[code]
#TypeAliasing ::= 'type' Identifier '=' Type
type alias = another_type
@[code]
For example,
@[code]
type StringList = list<string>
type Point3D    = tuple<x:float,y:float,z:float>
@[code]

@[text]



@[name]
dao.type.variant
@[name]

@[title]
Variant or Disjoint Union Type
@[title]

@[text]

A variant type is a type that can represent multiple alternative types.
A variant type is declared by joining these alternative types using 
@[green]|@[green] as the delimiter.
A variable of a variant type can hold value of any of the alternative types.
For example,
@[code]
intstr : int|string = 123
intstr = 'abc'
@[code]
Please note that a variant type does not support the operations of
the alternative types. It must be casted to the real type of the value
before using the operations of the real type.
To find out the real type of the value, one can use 
the type-of operator @[green]?<@[green], which will return 1-based
index of the real type in the list of alternative types:
@[code]
switch( intstr ?< type(int|string) ){
case 1 : io.writeln( (int) intstr * 1000 )
case 2 : io.writeln( (string) intstr + 'abcdefg' )
}
@[code]


@[code]
intstring : list<int|string> = {};

intstring.append( 123 );
intstring.append( 'abc' );

#intstring.append( {} ); # typing error

io.writeln( intstring, intstring[0], intstring[1] );
@[code]




@[code]
interface HasSizeMethod
{
	routine Size()=>int;
}
class AA
{
	routine Size()=>int{ return 10 }
}
class BB
{
	routine Size()=>int{ return 20 }
}

routine Test( object : AA | BB | HasSizeMethod )
{
# casting to an interface will invoke automatic binding:
	object2 = (HasSizeMethod) object;
	io.writeln( object2.Size() )
}

io.writeln( std.about( Test ) );

Test( AA() )
Test( BB() )

routine Test2( data : int | float | double | string )
{
# get 1-based index of its type in the disjoint union type:
	switch( data ?< type(int|float|double|string) ){
	case 1 : io.writeln( 'handling int' );
	case 2 : io.writeln( 'handling float' );
	case 3 : io.writeln( 'handling double' );
	case 4 : io.writeln( 'handling string' );
	}
}

Test2( 1 );
Test2( 1.0 );
Test2( 1.0D );
Test2( 'abc' );
@[code]




@[code]
class FakeImage
{
	var image = [1,2,3,4;5,6,7,8;11,12,13,14;15,16,17,18];

# instead of writing operator methods with all the combinations
# such as tuple<int,int>, tuple<int,none>, ...
# one can use disjoint union to simplify this.
	operator[]( i : int, js : tuple<int|none,int|none> )=>array<int>
	{
# one can simply return image[i,js], but the following is for demonstration purpose:
		j1 = 0;
		j2 = image.dim(1) - 1;
		if( js[0] != none ) j1 = (int) js[0];
		if( js[1] != none ) j2 = (int) js[1];
		return image[i,j1:j2];
	}
}

image = FakeImage();
io.writeln( image[1,1:] );
io.writeln( image[2,:1] );
@[code]




@[code]
routine Sum( alist : list<@T<int|string>> ) => @T
{
#	reflect.trace();
	return alist.sum();
}

s = Sum( { 1, 2, 3 } );
#s += 'a'; # typing error
io.writeln( s );

s2 = Sum( { 'a', 'b', 'c' } );
io.writeln( s2 );
@[code]
@[text]

