load help;

@[name]
daovm.architecture
@[name]

@[title]
The architecture of the Dao Virtual Machine
@[title]




@[name]
daovm.architecture.vmspace
@[name]

@[title]
VM Space
@[title]


@[name]
daovm.architecture.namespace
@[name]

@[title]
Namespace
@[title]


@[name]
daovm.architecture.class
@[name]

@[title]
Class
@[title]


@[name]
daovm.architecture.routine
@[name]

@[title]
Routine
@[title]


@[name]
daovm.architecture.process
@[name]

@[title]
VM Process
@[title]


@[name]
daovm.architecture.instruction
@[name]

@[title]
VM Instructions
@[title]

@[text]
@[code]
DVM_NOP      # no operation, the VM assumes maximum one NOP between two effective codes;
DVM_DATA     # create primitive data: A: type<=DAO_COMPLEX, B: value, C: register;
DVM_GETCL    # get local const: C = A::B; A=0; B, index of the constant;
DVM_GETCK    # get class const: C = A::B; current class, A=0; parent class: A>=1;
DVM_GETCG    # get global const: C = A::B; current namespace, A=0; loaded: A>=1;
DVM_GETVH    # get host variable from code section: C = A::B; A, outer level;
DVM_GETVS    # get static variable or captured up variable from closure;
DVM_GETVO    # get instance object variables: C = A::B; A=0;
DVM_GETVK    # get class global variables: C = A::B; A: the same as GETCK;
DVM_GETVG    # get global variables: C = A::B; A: the same as GETCG;
DVM_GETI     # GET Item(s) : C = A[B];
DVM_GETDI    # GET Item(s) : C = A[B], B is the (direct) index;
DVM_GETMI    # GET Item(s) : C = A[A+1, ..., A+B];
DVM_GETF     # GET Field : C = A.B
DVM_SETVH    # set host variable in code section: C::B = A; C, outer level;
DVM_SETVS    # set static variable or captured up variable from closure;
DVM_SETVO    # set object variables: C::B = A, C the same as A in DVM_GETVO
DVM_SETVK    # set class variables: C::B = A, C the same as A in DVM_GETVK
DVM_SETVG    # set global variables: C::B = A, C the same as A in DVM_GETVG
DVM_SETI     # SET Item(s) : C[B] = A;
DVM_SETDI    # SET Item(s) : C[B] = A, B is the (direct) index;
DVM_SETMI    # SET Item(s) : C[C+1, ..., C+B] = A;
DVM_SETF     # SET Field : C.B = A
DVM_LOAD     # put local value A as reference at C;
DVM_CAST     # convert A to C if they have different types;
DVM_MOVE     # C = A; if B==0, XXX it is compile from assignment, for typing system only
DVM_NOT      # C = ! A; not
DVM_MINUS    # C = - A; unary minus;
DVM_TILDE    # C = ~ A
DVM_SIZE     # C = % A; size operation;
DVM_ADD      # C = A + B;
DVM_SUB      # C = A - B;
DVM_MUL      # C = A * B;
DVM_DIV      # C = A / B;
DVM_MOD      # C = A % B;
DVM_POW      # C = A ** B;
DVM_AND      # C = A && B;
DVM_OR       # C = A || B;
DVM_LT       # C = A <  B;
DVM_LE       # C = A <= B;
DVM_EQ       # C = A == B;
DVM_NE       # C = A != B;
DVM_IN       # C = A in B;
DVM_BITAND   # C = A & B
DVM_BITOR    # C = A | B
DVM_BITXOR   # C = A ^ B
DVM_BITLFT   # C = A << B
DVM_BITRIT   # C = A >> B
DVM_CHECK    # check type: C = A ?= B; C = A ?< B, where A is data, B is data or type
DVM_NAMEVA   # C = A => B: name A, local constant, value B, local register
DVM_PAIR     # C = A : B; create a pair of index, as a tuple;
DVM_TUPLE    # tuple: C = ( A, A+1, ..., A+B-1 ); B>=2, items can be: name=>value
DVM_LIST     # list:  C = { A, A+1, ..., A+B-1 };
DVM_MAP      # map:   C = { A => A+1, ..., A+B-2 => A+B-1 }; if B==0, empty;
DVM_HASH     # hash:  C = { A -> A+1, ..., A+B-2 -> A+B-1 }; if B==0, empty;
DVM_VECTOR   # vector: C = [ A, A+1, ..., A+B-1 ];
DVM_MATRIX   # matrix: C=[A,..,A+c-1;..;A+c*(r-1),..,A+c*r-1]; B=rc;r,c:8-bits each.
DVM_APLIST   # arithmetic progression list: C = { A : ... : A+B-1 }, B = 2 or 3;
DVM_APVECTOR # arithmetic progression vector: C = [ A : ... : A+B-1 ], B = 2 or 3;
DVM_CURRY    # class_or_routine_name: A{ A+1, ..., A+B }
DVM_MCURRY   # object.method: A{ A+1, ..., A+B }
DVM_ROUTINE  # create a function, possibly with closure
DVM_CLASS    # C = class{}, A,A+1,..A+B: A, tuple, A+1, proto class, A+2,.. proto values
DVM_GOTO     # go to B;
DVM_SWITCH   # A: variable, B: location of default codes, C: number of cases
DVM_CASE     # A: constant of the case, B: location of the case codes, C: case mode
DVM_ITER     # create an iterator at C for A if B==0, else test an array of iterators;
DVM_TEST     # if A, go to the next one; else, goto B-th instruction;
DVM_MATH     # C = A( B ); A: sin,cos,...; B: double,complex
DVM_CALL     # function call: C = A( A+1, A+2, ..., A+B ); If B==0, no parameters;
DVM_MCALL    # method call: x.y(...), pass x as the first parameter;
DVM_RETURN   # return A,A+1,..,A+B-1; B==0: no returns; C==1: return from functional;
DVM_YIELD    # yield A, A+1,.., A+B-1; return data at C when resumed;
DVM_EVAL     # evaluate a code section: C=@@(A){}, if B==1, otherwise, C=@@{};
DVM_SECT     # code section label, parameters: A,A+1,...,A+B-1; C #explicit parameters;
DVM_JITC     # run Just-In-Time compiled Code A, and skip the next B instructions;
DVM_DEBUG    # prompt to debugging mode;
@[code]
@[text]





@[name]
daovm.architecture.bytecode
@[name]

@[title]
Bytecode Format
@[title]

@[text]


This document contains specifications of the bytecode format for Dao virtual machine.
In this bytecode format, integers are always stored in big endian.


In the following specifications or examples, each byte is represented by
two hexadecimal digits, unless it is quoted by quotation marks.


Data type used in the specification:
@[code(dao)]
type int8       # one byte signed integer;
type uint8      # one byte unsigned integer;
type uint16     # two byte unsigned integer;
type uint32     # four byte unsigned integer;
type int        # four or eight byte integer;
type double     # IEEE 754 double;

struct short_string
{
	uint16      # string length;
	int8[]      # character array;
}
@[code(dao)]


A Dao binary bytecode file will contain the following sections:
@[list]
==@[green]Header@[green]: basic information for the format;
==@[green]Source@[green]: path and file name of the source;
==@[green]Identifiers@[green]: identifiers used in the file;
==@[green]Modules@[green]: modules need to be loaded;
==@[green]Declarations@[green]: forward declaration of routines and classes etc.;
==@[green]Types@[green]: declaration of types;
==@[green]Values@[green]: all the values used in the file;
==@[green]Global Constants@[green]: global constants;
==@[green]Global Variables@[green]: global variables;
==@[green]Global Types@[green]: global types;
==@[green]Routines@[green]: routine definitions;
==@[green]Interfaces@[green]: interface definitions;
==@[green]Classes@[green]: class definitions;
@[list]


@[section]
Header
@[section]

Dao binary bytecode file begins with a header of 16 bytes consisting 
of the following parts:
@[code(dao)]
struct Header 
{
	uint8       # ESC, 0x1B;
	uint8       # 0x44, namely 'D';
	uint8       # 0x61, namely 'a';
	uint8       # 0x6F, namely 'o';
	uint8       # major version number, 0x1;
	uint8       # minor version number, 0x2;
	uint8       # Carriage Return (CR), 0x0D;
	uint8       # Line Feed (LF), 0x0A;
	uint8       # format version, 0x0 for the official one;
	uint8       # size of integer type, default 0x4;
	uint8[6]    # six reserved bytes;
}
@[code(dao)]
Example,
@[code(dao)]
1B 44 61 6F 01 02 0D 0A    # 8 bytes, signature for Dao 1.2;
00                         # uint8, format version: zero for official;
04                         # uint8, size of int: default 4;
00 00 00 00 00 00          # 6 byte, reserved;
@[code(dao)]
Regardless the size of integer, the bytecode should be loadable on both
32-bit and 64-bit Dao Virtual Machines, as long as the integers used
in the bytecode file do not overflow.



@[section]
Source
@[section]

The source file name (possibly including the path) is stored immediately after
the header as a @[green]short_string@[green]:
@[code(dao)]
struct Source
{
	short_string  # source name;
}
@[code(dao)]
Example,
@[code(dao)]
00 09            # uint16, source name length in bytes;
"test.dao"       # variable number of bytes;
@[code(dao)]




@[section]
Identifiers
@[section]

Identifiers are referenced by 1-base indices in this section,
such reference numbers are encoded in 16-bit unsigned integers.
Zero 0x0000 is used to indicate non-existing identifier,
which can be used to declare constants or variables which
occupy slots in the constant or variable arrays without names.

@[code(dao)]
struct Identifiers
{
	uint32          # number of identifiers;
	short_string[]  # list of identifier strings;
}
@[code(dao)]


@[section]
Modules
@[section]

This section lists the modules that are needed for the current codes.
They will be loaded in order to properly decode the rest of the bytecode file.
@[code(dao)]
struct Modules
{
	uint32          # number of modules;
	struct {
		uint32      # identifier reference number for the module file name;
		uint32      # identifier reference number for the module alias;
	}[]
}
@[code(dao)]




@[section]
Declarations
@[section]


Forward declarations of classes, interfaces, routines, ctype and namespace etc.
Each declaration is referenced by an unsigned 16-bit integer,
with 0x0000 reserved for the current namespace.
Scope objects listed in this section should be referenced by the 1-base index in this section.


Each declaration entry has the following fields:
@[code(dao)]
struct Declaration
{
	uint8       # object type (internal type ID);
	uint8       # object subtype;
	uint8       # declaration type:
	            # 0x0 for CREATE; 0x1 for SEARCH; 0x2 for LOADAS; 0x3 for TEMPLATE;
	uint32      # identifier reference number for the declaration name;
	            # or, declaration reference number for the namespace (for LOADAS);
	uint32      # declaration reference number for the host object;
	uint32      # identifier reference number for the field name in the host;
}
struct Declarations 
{
	uint32         # number of declarations;
	Declaration[]  # list of declarations;
}
@[code(dao)]



@[section]
Types
@[section]


The type section will declare a list of types
which can be referenced by their 1-based 16-bit integer indices in this section.
Zero is used to indicate a unspecified type.
Each type is declared with one byte for its internal type ID,
and two bytes of identifier reference number for its type name, 
followed by addition information.
A zero identifier reference number indicates the type has default
name that will be constructed from the type information.


Type declaration formats:
@[code(dao)]
# Core types: none, integer, float, ..., string:
struct CoreType 
{
	uint8       # type id (DAO_NONE, DAO_INTEGER, ...);
	uint8       # type attributes;
	uint32      # identifier reference number to the type name;
}

# Enum type:
struct EnumType 
{
	uint8       # type id (DAO_ENUM);
	uint8       # type attributes;
	uint32      # identifier reference number to the type name;
	uint8       # sub type, 0 for normal enums, 1 for flags;
	uint16      # number of symbols;
	struct {
		uint32  # identifier reference number to the symbol;
		uint32  # values associated with the symbol;
	}[]         # list of symbols;
}

# Array, List, Map, Tuple, Type and Future Value type:
struct ContainerType
{
	uint8       # type id (DAO_ARRAY, DAO_LIST, ...);
	uint8       # type attributes;
	uint32      # identifier reference number to the type name;
	uint16      # number of item types;
	uint32[]    # list of item types: type reference numbers;
}

# Variant type
struct VariantType
{
	uint8       # type id (DAO_ARRAY, DAO_LIST, ...);
	uint8       # type attributes;
	uint32      # identifier reference number to the type name;
	uint32      # type reference number to the type holder, if it has;
	uint16      # number of item types;
	uint32[]    # list of item types: type reference numbers;
}

# Value type:
struct ValueType
{
	uint8       # type id (DAO_VALTYPE);
	uint8       # type attributes;
	uint32      # identifier reference number to the type name;
	NoneValue|IntValue|FloatValue|DoubleValue|
	ComplexValue|LongValue|StringValue|EnumValue   # value of the value type;
}

# Named parameter: name:type or name=type
struct NameParamType
{
	uint8       # type id (DAO_PAR_NAMED or DAO_PAR_DEFAULT);
	uint8       # type attributes;
	uint32      # identifier reference number to the type name;
	uint32      # identifier reference number to the parameter name;
	uint32      # type reference number;
}

# Type holder type:
struct TypeHolderType
{
	uint8       # type id (DAO_THT);
	uint8       # type attributes;
	uint32      # identifier reference number to the type name;
}

# Codeblock type:
struct CodeBlockType
{
	uint8       # type id (DAO_CODEBLOCK);
	uint8       # type attributes;
	uint32      # identifier reference number to the type name;
	uint32      # type reference number to the return type;
	uint16      # number of item types;
	uint32[]    # list of item types: type reference numbers;
}

# Routine types:
struct RoutineType
{
	uint8       # type id (DAO_ROUTINE);
	uint8       # type attributes;
	uint32      # identifier reference number to the type name;
	uint32      # declaration reference number (for overloaded routine type);
	uint32      # type reference number to the return type;
	uint32      # type reference number for the codeblock type;
	uint16      # number of item types;
	uint32[]    # list of item types: type reference numbers;
}

# Interface type:
struct InterfaceType
{
	uint8       # type id (DAO_INTERFACE);
	uint8       # type attributes;
	uint32      # identifier reference number to the type name;
	uint32      # declaration reference number for the interface;
}

# Class type:
struct ClassType
{
	uint8       # type id (DAO_CLASS);
	uint8       # type attributes;
	uint32      # identifier reference number to the type name;
	uint32      # declaration reference number for the class;
}

# Class instance type:
struct InstanceType
{
	uint8       # type id (DAO_OBJECT);
	uint8       # type attributes;
	uint32      # identifier reference number to the type name;
	uint32      # declaration reference number for the class;
}

# Ctype type:
struct CtypeType
{
	uint8       # type id (DAO_CTYPE);
	uint8       # type attributes;
	uint32      # identifier reference number to the type name;
	uint32      # declaration reference number for the ctype object;
	            # or, type reference number for the template type;
	uint16      # number of item types, for specializing;
	uint32[]    # list of item types: type reference numbers;
}

# Cdata type:
struct CdataType
{
	uint8       # type id (DAO_CDATA);
	uint8       # type attributes;
	uint32      # identifier reference number to the type name;
	uint32      # declaration reference number for the ctype object;
	            # or, type reference number for the template type;
	uint16      # number of item types, for specializing;
	uint32[]    # list of item types: type reference numbers;
}

@[code(dao)]





@[section]
Values
@[section]

All values are stored with one byte of type ID followed by additional data.
Values are referenced by their 1-base indices in this section.
Value reference numbers are 32-bit unsigned integer.
Zero is reserved for a NULL value.


Value formats:
@[code(dao)]
# none:
struct NoneValue
{
	uint8       # type ID (0x00, DAO_NONE);
}

# int:
struct IntValue 
{   
	uint8       # type ID (0x01, DAO_INTEGER);
	int         # integer value;
}

# float:
struct FloatValue
{   
	uint8       # type ID (0x02, DAO_FLOAT);
	double      # double value;
}

# double:
struct DoubleValue
{   
	uint8       # type ID (0x03, DAO_DOUBLE);
	double      # double value;
}

# complex:
struct ComplexValue
{   
	uint8       # type ID (0x04, DAO_COMPLEX);
	double      # double value, real part;
	double      # double value, imaginary part;
}

# long:
struct LongValue
{   
	uint8       # type ID (0x05, DAO_LONG);
	uint8       # sign, 0 for positive, 1 for negative;
	int         # number of 256-base digits;
	uint8[]     # list of digits;
}

# string:
struct StringValue
{   
	uint8       # type ID (0x06, DAO_STRING);
	uint8       # high 4 bits, char type (0 for WCS, 1 for MBS);
	            # low 4 bits, char size in bytes (1 for MBS; 1,2,4 for WCS);
	int         # number of characters;    
	(int8|uint16|uint32)[]  # list of characters;
}

# enum:
struct EnumValue
{
	uint8       # type ID (0x07, DAO_ENUM);
	uint32      # type reference number;
	uint32      # value;
}

# array:
struct ArrayValue
{
	uint8       # type ID (0x08, DAO_ARRAY);
	uint8       # numeric type ID (for int, float, double or complex);
	int         # total number of elements;
	uint16      # number of dimensions;
	int[]       # list of dimension sizes (int);
	(int|double|struct{double,double})[]  # list of elements;
}

# list:
struct ListValue
{
	uint8       # type ID (0x09, DAO_LIST);
	uint32      # type reference number;
	int         # number of items;
	uint32[]    # list of value reference numbers;
}

# map:
struct MapValue
{
	uint8       # type ID (0x0A, DAO_MAP);
	uint32      # type reference number;
	uint32      # hashing seed;
	int         # number of items;
	uint32[]    # list of value reference numbers;
}

# tuple:
struct TupleValue
{
	uint8       # type ID (0x0B, DAO_ARRAY);
	uint32      # type reference number;
	uint32      # number of items;
	uint32[]    # list of value reference numbers;
}

# Class instance:
# Complete instance:
struct CompleteInstanceValue 
{
	uint8       # type ID (0x0C, DAO_OBJECT);
	uint8       # flag (0x0 for complete);
	uint32      # declaration reference number for the class;

	uint16      # number of values;
	uint32[]    # list of value reference numbers;
}
# Partial instance is an instance embedded in another:
struct PartialInstanceValue 
{
	uint8       # type ID (0x0C, DAO_OBJECT);
	uint8       # flag (0x1 for partial);
	uint32      # declaration reference number for the class;

	uint16      # value offset;
	uint32      # value reference number for its host object;
}
# The default instance for the class:
struct DefaultInstanceValue 
{
	uint8       # type ID (0x0C, DAO_OBJECT);
	uint8       # flag (0x2 for default);
	uint32      # declaration reference number for the class;
}

# Routine:
struct RoutineValue
{
	uint8       # type ID (0x11, DAO_ROUTINE);
	uint32      # declaration reference number for the routine;
	uint32      # type reference number for the routine type;
	uint32      # type reference number for the host type;
	uint16      # routine attributes;
	uint16      # number of overloaded routines;
	uint32[]    # value reference number for the overloaded routine;
}

# Class, ctype, interface and namespace:
struct ClassCtypeInterfaceNamespaceValue
{
	uint8       # type ID (DAO_ROUTINE, DAO_CLASS, ...);
	uint32      # declaration reference number;
}

# Type value:
struct TypeValue
{
	uint8       # type ID (DAO_TYPE);
	uint32      # type reference number for the type;
}


# Named value:
struct NamedValue
{
	uint8       # type ID (DAO_PAR_NAME);
	uint32      # identifier reference number for the name;
	uint32      # type reference number for the type;
	uint32      # value reference number for the value;
}


struct Values
{
	uint32      # number of values;
	[]          # list of values;
}
@[code(dao)]




@[section]
Global Constants
@[section]

Global constants are listed in the order of their declarations in the original
source file. Each constant is encoded in the following format,
@[code(dao)]
struct Constant
{
	uint32      # identifier reference number for the constant name;
                # 0x0000 declares a constant without name;

	uint16      # lookup index;
	uint8       # permission (0: public; 1: protected: 2: private);
	uint32      # value reference number for the constant;
}

struct GlobalConstants
{
	uint32      # number of global constants;
	Constant[]  # list of constants;
}
@[code(dao)]




@[section]
Global Variables
@[section]

Global variables are listed in the order of their declarations in the original
source file. Each variable is encoded in the following format,
@[code(dao)]
struct Variable
{
	uint32      # identifier reference number for the variable name;
	            # 0x0000 will declare a variable without name;

	uint16      # lookup index;
	uint8       # permission (0: public; 1: protected: 2: private);
	uint32      # type reference number for the variable;
	            # 0x0000 can be used for variables without explicit types;

	uint32      # value reference number for the initial or default value;
	            # 0x00000000 can be used for variables without such value;
}

struct GlobalVariables
{
	uint32      # number of global variables;
	Variable[]  # list of variables;
}
@[code(dao)]






@[section]
Global Types
@[section]

Each global type declaration is encoded in the following format,
@[code(dao)]
struct Type
{
	uint32      # identifier reference number for the type name;
	uint32      # type reference number for the type;
}

struct GlobalTypes
{
	uint32      # number of global types;
	Type[]      # list of types;
}
@[code(dao)]





@[section]
Routines
@[section]


@[code(dao)]
struct Instruction 
{
	uint16      # opcode;
	uint16      # operand a;
	uint16      # operand b;
	uint16      # operand c;
}

struct StaticVar
{
	uint32      # type reference number for the variable;
	            # 0x0000 can be used for variables without explicit types;

	uint32      # value reference number for the initial or default value;
	            # 0x00000000 can be used for variables without such value;
}

struct Routine 
{
	uint32         # declaration reference number to the routine;
	uint32         # identifier reference number to the routine name;
	uint32         # type reference number for the routine type;
	uint32         # type reference number for the host type;
	uint16         # attributes;
	uint16         # line of definition;
	uint16         # number of local constants;
	uint32[]       # list of value reference numbers for the constants;
	uint16         # number of static variables;
	StaticVar[]    # list of static variables;
	uint16         # number of local variables;
	uint16         # number of local variables with explicit types;
	struct {       # list of variable indices with type reference numbers;
		uint16     # variable index;
		uint32     # type reference number for the variable type;
	}
	uint16         # number of line information items;
	struct {       # duplicated line numbers can be used for lines with
	               # more than 255 instructions;
		uint16     # line number;
		uint8      # number of instructions for the line;
	}
	uint16         # number of instructions;
	Instruction[]  # list of instructions;
}

struct Routines
{
	uint32      # number of routines;
	Routine[]   # list of routines;
}
@[code(dao)]






@[section]
Interfaces
@[section]


Each interface is declared with the following fields:
@[code(dao)]
struct Interface 
{
	uint32      # declaration reference number to the interface;
	uint16      # number of parent interfaces;
	uint32[]    # list of declaration reference numbers to parents;
	uint16      # number of abstract methods;
	uint32[]    # list of value reference numbers to the methods;
}

struct Interfaces 
{
	uint32       # number of interfaces;
	Interface[]  # list of interfaces;
}
@[code(dao)]




@[section]
Classes
@[section]


Each class is declared in the following format:
@[code(dao)]
struct Class 
{
	uint32      # declaration reference number to the class;
	uint16      # class attributes;
	uint32      # declaration reference number to the default constructor;
	uint32      # declaration reference number for the parent class or ctype;
	uint16      # number of constants (including methods);
	Constant[]  # list of constants in the same format as global constants;
	uint16      # number of static varaibles;
	Variable[]  # list of variables in the same format as global variables;
	uint16      # number of instance varaibles;
	Variable[]  # list of variables in the same format as global variables;
	uint16      # number of types in the class scope;
	Type[]      # list of types;
}

struct Classes 
{
	uint32      # number of classes;
	Class[]     # list of classes;
}
@[code(dao)]



@[text]
