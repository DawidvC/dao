load help;

@[name]
dao.type.string
@[name]

@[title]
String Type
@[title]

@[text]
@[green]string@[green] is a primitive data type representing a sequence of characters,
which can be either single-byte characters or wide characters.
Strings with single-byte characters are normally declared with string literals that
are quoted with single quotation marks.
And strings with wide characters are declared with string literals that are quoted
with double qutotation marks. 


@[subsection]Basic Definition@[subsection]

@[code]
ByteCharacterString ::= "'" Characters "'"
WideCharacterString ::= '"' Characters '"'
@[code]
where @[green]Characters@[green] can be anything but the quotation marks
without backslash escapes. Any characters in a string can be preceded with
a escape backslash to specify a charater represented by:
@[list]
-- Single decimal digit: @[green]\d@[green];
-- Octal value with upto 3 digits: @[green]\ooo@[green];
-- Hexidecial value with upto 2 digits prefixed by @[green]x@[green]:
   @[green]\xhh@[green];
-- Hexidecial value with upto 4 digits prefixed by @[green]u@[green]:
   @[green]\xhhhh@[green];
-- Hexidecial value with upto 8 digits prefixed by @[green]U@[green]:
   @[green]\xhhhhhhhh@[green];
@[list]
With backslash escapes, a tab can also be represtend by @[green]\t@[green],
and a line break by @[green]\n@[green] and a carriage return by @[green]\r@[green].
Any other character escaped by a backslash literally represents that character itself.


Besides the basic quotation marks, a few other quotation marks can
also be used to enclose string literals.
These include the Double Byte Characters (DBC) quotation marks
(0x27+0xfee0 for single quotation mark and 0x22+0xfee0 for double quotation mark),
the left and right single quotation marks (0x2018, 0x2019),
and the left and right double quotation marks (0x201c, 0x201d).


Dao strings are @[green]not@[green] null-terminated, so they are effectively byte 
or character arrays that can be used to store any sequences of bytes or characters.
When a string of single-byte characters is used to store text, 
it is interpreted as Multi-Bytes String (MBS).
Similarly a string of wide characters is interpreted as Wide Character String (WCS)
for storing text.
For convenience, we will simply use Multi-Bytes String (MBS) and 
Wide Character String (WCS) to refer to the two types of strings.


These two types of strings can be mixed together, one can be converted to               the other automatically when necessary. But it is better to use one of 
them consistently to avoid unnecesary conversions.


@[subsection]Verbatim String@[subsection]

A verbatim string is a string that can contain anything
without interpreting escape characters.
@[code]
VerbatimMBString ::= '@[' [Delimiter] ']' Characters '@[' [Delimiter] ']'
VerbatimWCString ::= '@@[' [Delimiter] ']' Characters '@@[' [Delimiter] ']'
@[code]
Where @[cyan]Delimiter@[cyan] can contain letters, digits, underscores, 
blank spaces, dots, colons, dashes and assignment marks.
It must be unique such that @[green]'@[' [Delimiter] ']'@[green]
or @[green]'@@[' [Delimiter] ']'@[green] does not appear in the string content.
If @[green]@[]@[green] is used to enclose a verbatim string, this string
will be stored as multi-byte string.
And if @[green]@@[]@[green] is used to enclose a verbatim string, this string
will be stored as wide character string.


@[subsection]Examples@[subsection]

@[code]
mbs = 'hello'
wcs = "道语言"
mbs2 = 'It\'s green'
wcs2 = "\u9053\u8bed\u8a00" # the same as wcs;

# verbatim strings:
mbs = @[] some text @[]
wcs = @@[] some text @@[]

# C++ codes in MBS:
cpp =
@[cpp x]
class AA
{
	int index;
};
struct BB{};
@[cpp x]


# Lua codes in MBS:
lua =
@[lua]
local a = 1;
function Test()
	io.write( 'Hello' )
end
@[lua]

# HTML codes in WCS:
html =
@@[html:123456]
<body>
<span name="test"></span>
</body>
@@[html:123456]
@[code]

@[text]


################################################################################
################################################################################
########
######## String methods
########
################################################################################
################################################################################

@[name]
dao.type.string.method
@[name]

@[title]
Dao string methods
@[title]

@[text]
@[code]
chop(  )
erase( start=0, n=-1 )
find( str : string, from=0, reverse=0 ) => int
insert( str : string, index=0 )
replace( str1 : string, str2 : string, index=0 )
replace( str1 : string, table : map<string,string>, max=0 )
expand( keys :map<string,string>, spec='$', keep=1 )
expand( keys : tuple, spec='$', keep=1 )
resize( size : int )
size(  ) => int
split( sep : string, quote="", rm=1 ) => list<string>
tokenize( seps : string, quotes="", backslash=0, simplify=0 ) => list<string>
tonumber( base=10 ) => double
tolower(  ) => string
toupper(  ) => string
encrypt( key : string, hex=0 ) => string
decrypt( key : string, hex=0 ) => string
@[code]
@[text]


@[name]
dao.type.string.method.chop
@[name]

@[title]
string.chop()
@[title]

@[text]
@[code]
string.chop( utf=0 )
@[code]
Chop off new line symbol from the end of a string.
If utf=1, chop off the characters that do not form a valid UTF-8 encoding.
@[text]

@[name]
dao.type.string.method.erase
@[name]

@[title]
string.erase()
@[title]

@[text]
@[code]
string.erase( start=0, n=-1 )
@[code]
Erase <%>n</%> characters starting from index <%>start</%>.
If n=-1, erase all the rest.

@[text]

@[name]
dao.type.string.method.find
@[name]

@[title]
string.find()
@[title]

@[text]
@[code]
string.find( str : string, from=0, reverse=0 ) => int
@[code]
Find substring <%>str</%>, starting from <%>from</%>; search backward if <%>reverse</%> is true.
Return the index of the occurrence of <%>str</%>, return -1 if not found.

@[text]

@[name]
dao.type.string.method.insert
@[name]

@[title]
string.insert()
@[title]

@[text]
@[code]
string.insert( str : string, index=0 )
@[code]
Insert substring <%>str</%> at <%>index</%>

@[text]

@[name]
dao.type.string.method.replace
@[name]

@[title]
string.replace()
@[title]

@[text]
@[code]
string.replace( str1 : string, str2 : string, index=0 )
@[code]
Replace the <%>index</%>-th occurrence of substring <%>str1</%> to substring <%>str2</%>;
the index starts from 1, which means the first, and 0 means all.

@[code]
string.replace( table : map<string,string>, max=0 )
@[code]
Replace the occurrence of the keys of <it>table</it> by the corresponding values.
If <it>max</it> is zero, replace the shorter key first, otherwise,
replace the longer first.

@[text]

@[name]
dao.type.string.method.expand
@[name]

@[title]
string.expand()
@[title]

@[text]
@[code]
string.expand( keys : map<string,string>, spec='$', keep=1 ) => string
@[code]
If the string contains place holders in form of <it>$(name)</it>,
where <it>$</it> is the special character passed in by <it>spec</it>,
this method will expand or fill at each place holder by the value string
from <it>keys</it> with key equal to the name of the place holder.


If <it>keep</it> is zero, place holders with names not found in <it>keys</it>
will be replaced by empty string, namely, removing the place holders;
otherwise the are kept.

<demo dao>
tpl = 'The quick brown $(A) jumps over the lazy $(B)';
str = tpl.expand( { 'A' => 'fox', 'B' => 'dog' } );
stdio.println( str );
</demo>

@[text]

@[name]
dao.type.string.method.expand
@[name]

@[title]
string.expand()
@[title]

@[text]
@[code]
string.expand( keys : tuple, spec='$', keep=1 ) => string
@[code]
If the string contains place holders in form of <it>$(name)</it>,
where <it>$</it> is the special character passed in by <it>spec</it>,
this method will expand or fill at each place holder by the item value string
from <it>keys</it> with item field name equal to the name of the place holder.

If <it>keep</it> is zero, place holders with names not found in <it>keys</it>
will be replaced by empty string, namely, removing the place holders;
otherwise the are kept.

<demo dao>
tpl = 'The quick brown $(A) jumps over the lazy $(B)';
str = tpl.expand( ( A => 'fox', B => 'dog' ) );
stdio.println( str );
</demo>

@[text]

@[name]
dao.type.string.method.resize
@[name]

@[title]
string.resize()
@[title]

@[text]
@[code]
string.resize( size : int )
@[code]
Resize the string to have length <%></%>, and the extended part are filled with blank space.

@[text]

@[name]
dao.type.string.method.size
@[name]

@[title]
string.size()
@[title]

@[text]
@[code]
string.size(  ) => int
@[code]
Return the length of a string.

@[text]

@[name]
dao.type.string.method.split
@[name]

@[title]
string.split()
@[title]

@[text]
@[code]
string.split( sep : string, quote="", rm=1 ) => list<string>
@[code]
Split the string by seperator <%>sep</%>, and return the tokens as a list. 
Quotation symbols may also be specified to avoid breaking the string inside 
a pair of quotes. If the quotations symbols appear in the
begin and end of a token and <%>rm</%> is true, they are removed.
The seperators are not included in the result list.

@[text]

@[name]
dao.type.string.method.tokenize
@[name]

@[title]
string.tokenize()
@[title]

@[text]
@[code]
string.tokenize( seps : string, quotes="", backslash=0 ) => list<string>
@[code]
Tokenize the string by a set of separators. 
Each character in <%>seps</%> is treated as a separator.
Quotation symbols may also be specified to avoid breaking the string inside a pair of quotes.
If <%>backslash</%> is true, the separators and quotes preceded by a backslash are considered as normal characters.
The separators, quotes and backslashes are not removed from the result tokens.
If <%>simplify</%> is true, the blank spaces are removed from the beginning and end of
each token, and then empty tokens are remove from the resulting list.

@[text]

@[name]
dao.type.string.method.tonumber
@[name]

@[title]
string.tonumber()
@[title]

@[text]
@[code]
string.tonumber( base=10 ) => double
@[code]
Convert the string to a number with base equal to <%>base</%>.

@[text]

@[name]
dao.type.string.method.tolower
@[name]

@[title]
string.tolower()
@[title]

@[text]
@[code]
string.tolower(  ) => string
@[code]
Convert the string to lower case.
Return <%>self</%> string.

@[text]

@[name]
dao.type.string.method.toupper
@[name]

@[title]
string.toupper()
@[title]

@[text]
@[code]
string.toupper(  ) => string
@[code]
Convert the string to upper case.
Return <%>self</%> string.
@[text]
