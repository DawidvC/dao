
CHANGESET_ID = $(shell head -c 12 manifest.uuid)
ifeq ($(CHANGESET_ID),)
  CHANGESET_ID = $(shell type manifest.uuid)
endif

ifneq ($(CHANGESET_ID),)
  DAO_CFLAGS += -DCHANGESET_ID=\"FOS.$(CHANGESET_ID)\"
endif

DAO_INCS += -Ikernel

DAO_OBJECTS = kernel/daoArray.o \
              kernel/daoMap.o \
              kernel/daoType.o \
              kernel/daoValue.o \
              kernel/daoProcess.o \
              kernel/daoRoutine.o \
              kernel/daoGC.o \
              kernel/daoStdtype.o \
              kernel/daoNamespace.o \
              kernel/daoString.o \
              kernel/daoStdlib.o \
              kernel/daoMacro.o \
              kernel/daoLexer.o \
              kernel/daoParser.o \
              kernel/daoOptimizer.o \
              kernel/daoThread.o \
              kernel/daoNumtype.o \
              kernel/daoClass.o \
              kernel/daoConst.o \
              kernel/daoObject.o \
              kernel/daoSched.o \
              kernel/daoStream.o \
              kernel/daoVmcode.o \
              kernel/daoVmspace.o \
              kernel/daoRegex.o


ifeq ($(inline),all)
  aux = yes
  sys = yes
  math = yes
  meta = yes
  serializer = yes
#  fsnode = yes
#  net = yes
#  cgi = yes
#  json = yes
#  sync = yes
endif

DAO_MODULES =

# Assuming a C/C++ module is loadable by name "mod" with entry function named DaoMod_OnLoad(),
# it can be easily embedded into Dao by compiling Dao with -DDAO_WITH_MODULES=\"Mod:path/mod\",
# and linking with the module's object files.
#
# Note: mod in path/mod, can be replaced with libdao_mod/dao_mod/daomod.
#
# In -DDAO_WITH_MODULES, multiple modules must be separated by comma.

ifeq ($(aux),yes)
  DAO_INCS += -Imodules/auxlib
  DAO_OBJECTS += modules/auxlib/dao_aux.o
  DAO_MODULES := $(DAO_MODULES)Aux:modules/auxlib/dao_aux,
endif

ifeq ($(sys),yes)
  DAO_INCS += -Imodules/syslib
  DAO_OBJECTS += modules/syslib/dao_sys.o
  DAO_MODULES := $(DAO_MODULES)Sys:modules/syslib/dao_sys,
endif

ifeq ($(math),yes)
  DAO_INCS += -Imodules/math
  DAO_OBJECTS += modules/math/dao_math.o
  DAO_MODULES := $(DAO_MODULES)Math:modules/math/dao_math,
endif

ifeq ($(meta),yes)
  DAO_INCS += -Imodules/meta
  DAO_OBJECTS += modules/meta/dao_meta.o
  DAO_MODULES := $(DAO_MODULES)Meta:modules/meta/dao_meta,
endif

ifeq ($(serializer),yes)
  DAO_INCS += -Imodules/serializer
  DAO_OBJECTS += modules/serializer/dao_serializer.o
  DAO_MODULES := $(DAO_MODULES)Serializer:modules/serializer/dao_serializer,
endif

ifeq ($(fsnode),yes)
  DAO_INCS += -Imodules/os/fs
  DAO_OBJECTS += modules/os/fs/dao_fs.o
  DAO_MODULES := $(DAO_MODULES)FS:modules/os/fs/dao_fs,
endif

ifeq ($(net),yes)
  DAO_INCS += -Imodules/net
  DAO_OBJECTS += modules/net/dao_network.o
  DAO_MODULES := $(DAO_MODULES)Net:modules/net/dao_net,
endif

ifeq ($(cgi),yes)
  DAO_INCS += -Imodules/web/cgi
  DAO_OBJECTS += modules/web/cgi/dao_cgi.o
  DAO_MODULES := $(DAO_MODULES)CGI:modules/web/cgi/dao_cgi,
endif

ifeq ($(json),yes)
  DAO_INCS += -Imodules/web/json
  DAO_OBJECTS += modules/web/json/dao_json.o
  DAO_MODULES := $(DAO_MODULES)JSON:modules/web/json/dao_json,
endif

ifeq ($(sync),yes)
  DAO_INCS += -Imodules/sync
  DAO_OBJECTS += modules/sync/dao_sync.o
  DAO_MODULES := $(DAO_MODULES)Sync:modules/sync/dao_sync,
endif

DAO_CFLAGS += -DDAO_WITH_MODULES=\"$(DAO_MODULES)\"

first: all

####### Implicit rules

.SUFFIXES: .c

.c.o:
	$(DAO_CC) -c $(DAO_CFLAGS) $(DAO_INCS) -o $@ $<

kernel/daoMain.o: kernel/daoMain.c
	$(DAO_CC) -c $(DAO_CFLAGS) $(USE_READLINE) $(DAO_INCS) -o $@ $<

####### Build rules

all: $(DAO_DLL) $(DAO_EXE) modules doc

lib: $(DAO_DLL) modules

$(DAO_DLL): $(DAO_OBJECTS)
	$(DAO_CC) $(DAO_DLLFLAGS) -o $(DAO_DLL) $(DAO_OBJECTS) $(DAO_LIBS)

$(DAO_EXE): $(DAO_DLL) kernel/daoMain.o
	$(DAO_CC) $(DAO_LFLAGS) -o $(DAO_EXE) kernel/daoMain.o $(DAO_LIBS) $(DAO_LFLAGS_DAO)

static: $(DAO_OBJECTS) kernel/daoMain.o
	$(DAO_CC) $(DAO_LFLAGS) -o $(DAO_EXE) $(DAO_OBJECTS) kernel/daoMain.o $(DAO_LIBS)
	$(AR) $(DAO_ARC) $(DAO_OBJECTS)

one: $(DAO_OBJECTS) kernel/daoMainv.o
	$(DAO_CC) $(DAO_LFLAGS) -o daov $(DAO_OBJECTS) kernel/daoMainv.o $(DAO_LIBS)


modules:
	-cd modules && $(MAKE)


DAO_HELP_LANG ?= en

doc:
	@$(HAS_DIR) doc/html || $(MKDIR) doc/html
	@$(HAS_DIR) doc/html/$(DAO_HELP_LANG) || $(MKDIR) doc/html/$(DAO_HELP_LANG)
	DAO_HELP_LANG=$(DAO_HELP_LANG) ./dao -e "load help; help.export('','doc/html/$(DAO_HELP_LANG)')"


checkout:
	-$(HAS_FILE) modules/Makefile2 || (cd modules && fossil clone http://daovm.net/projects/dao-modules dao-modules.fossil && fossil open --nested dao-modules.fossil)
	-$(HAS_DIR) tools/clangdao || (cd tools && fossil clone http://daovm.net/projects/dao-tools dao-tools.fossil && fossil open --nested dao-tools.fossil)


.PHONY: modules doc clean
