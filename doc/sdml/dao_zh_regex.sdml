<report>道正则表达式</report>
<author>傅利民(phoolimin@gmail.com)</author>

<====>介绍</====>

正则表达式是一个用单个字符串表示的句法规则，
用以描述或者匹配符合该规则的所有字符串。
正则表达式主要被用来进行字符串操作，
如在字符串里查找，提取或替换符合某规则的子字符串。


从最新的发布开始，道语言不再从语法上支持正则表达式，
正则表达式的功能改由字符串方法支持。
而且新的正则表达式的语法也有所改变，变得更象Lua语言所支持的
正则表达式（主要区别在于字符类的表示符号）。

<====>字符类</====>

一个字符类表示从属某类的所有字符：
<list>
--[x] : 普通字符表示它自己，特殊字符<hlbf>^$()%.[]*+-?{}\<\></hlbf>不在此之列；
--[.] : 点表示所有字符；
--[%a] : 所有字母符号；
--[%s] : 所有空白字符；
--[%k] : 所有控制字符；
--[%p] : 所有标点符号；
--[%d] : 所有数字；
--[%x] : 所有十六进制数字；
--[%c] : 所有小写字母；
--[%w] : 所有字母，数字加'_'；
--[%A] : 所有非字母字符，<hlbf>%a</hlbf>的补集;
--[%S] : 所有非空白字符，<hlbf>%s</hlbf>的补集;
--[%K] : 所有非控制字符，<hlbf>%k</hlbf>的补集;
--[%P] : 所有非标点符号字符，<hlbf>%p</hlbf>的补集;
--[%D] : 所有非数字，<hlbf>%d</hlbf>的补集;
--[%X] : 所有非十六进制数字的字符，<hlbf>%x</hlbf>的补集;
--[%C] : 大写字母；
--[%W] : <hlbf>%w</hlbf>的补集;
--[%]<bf>x</bf> : 表示字符<bf>x</bf>, 这里<bf>x</bf>是一非数字，非字母的字符；
<bf>x</bf>也可以是字母字符，如果它不是<bf>b</bf>或者<bf>B</bf>，
也不表示某个字符类；
--[[set]] : 表示<hlbf>set</hlbf>中所有字符的并集；
<hlbf>set</hlbf>可以以<bf>x-y</bf>的形式包含一从<bf>x</bf>到<bf>y</bf>区间上的所有字符;
上面的字符类也可出现在<hlbf>set</hlbf>里；
--[[^set]] : <hlbf>[set]</hlbf>的补集。
</list>

<====>模式项</====>

模式项可以是：
<list>
--[] 单个字符类；
--[^] : 匹配字符串开头；
--[$] : 匹配字符串结尾；
--[%n] : 匹配第<bf>n</bf>个模式组的子字符串；<bf>n</bf>可以是一个或多个数字；
--[%bxy] : 匹配一平衡配对的字符<bf>x</bf>和<bf>y</bf>；
这里平衡表示，从相同的匹配位置开始，被匹配的子字符串必须包含相同且最少数目的
<bf>x</bf>和<bf>y</bf>；
类似于Lua的字符串模式语法；
--[%B{pattern1}{pattern2}] : 匹配一平衡配对的模式<bf>pattern1</bf>和<bf>pattern2</bf>;
类似于<hlbf>%bxy</hlbf>；
</list>

<====>模式项重复</====>
模式项<hlbf>e</hlbf>可以选择性的被忽略或重复匹配，规则如下：
<list>
--[e?] : 匹配零次或一次；
--[e*] : 匹配零次或任意次数；
--[e+] : 匹配一次或多次；
--[e{n}] : 匹配<bf>n</bf>次；
--[e{n,}] : 匹配至少<bf>n</bf>次；
--[e{,n}] : 匹配至多<bf>n</bf>次；
--[e{n,m}] : 匹配至少<bf>n</bf>次，且最多<bf>m</bf>次；
</list>

<====>模式组和扑获</====>

在正则表达式里，可以用括号将一个或多个模式项括起来形成一个子模式，即模式组(group)。
一个模式组里可包含多个可选子模式，以<bf>|</bf>分开。
如果用<it>(|pattern)</it>或<it>(pattern|)</it>包含一个空的可选子模式，
那么这个模式组可在字符串匹配过程中被跳过。
如果正则表达式里含有多个模式组，那么按模式组的左括号所出现的顺序，
每个模式组都会自动获得一个标号。例如，在<it>(%a+)%s*(%d+(%a+))</it>里，
第一个<it>(%a+)</it>将拥有标号1，<it>(%d+(%a+))</it>拥有标号2，
而第二个<it>(%a+)</it>将拥有标号3。
为了方便起见，整个正则表达式所表达的模式也被自动定义为一个模式组，
标号为0。


当一个字符串被匹配到一个正则表达式时，那些与其中的模式组相匹配的
子字符串将被标记（扑获），以便于被引用或提取。
如在进行字符串匹配或替换时，<bf>%n</bf>可被用作表示
第<bf>n</bf>个模式组所匹配的子字符串。


当一个正则表达式可以有多种方式匹配到一个字符串里起始于同一个下标的子字符串时，
匹配长度最长的匹配方式将被选中，并返回相应的结果。
匹配长度将被定义为该表达式里所有模式组所匹配的子字符串的长度的和。
根据这种定义，如果需要给予某个模式组更高的匹配优先权，那么可以
给该模式组增加更多层括号。
例如<it>(%d%w*)(%w*%d)</it>可以有两种方式匹配到<it>1a2</it>，
一种是将<it>1a</it>匹配给<it>(%d%w*)</it>及<it>2</it>匹配给<it>(%w*%d)</it>；
另一种是将<it>1</it>匹配给<it>(%d%w*)</it>及<it>a2</it>匹配给<it>(%w*%d)</it>。
如果在<it>(%w*%d)</it>外再添加一层括号，即<it>(%d%w*)((%w*%d))</it>，
那么它与<it>1a2</it>的匹配将变得唯一，也就是将<it>a</it>匹配到后面的组里。

<====>字符串函数</====>

象Lua里一样，正则表达式的功能需要通过字符串的成员方法使用。
正则表达式需要以字符串的形式作为参数传递给那些方法。
每个正则表达式字符串都在第一次使用时被编译为一内部表达结构，
并与之一一对应。每当正则表达式字符串被使用时，其相应的内部表达结构
将被取用，以避免多次编译正则表达式。
实际上，每个正则表达式字符串在每一个虚拟进程里仅被编译一次。

<==>pfind(): 查找匹配模式的子字符串</==>
<code dao>
string.pfind( pt : string, index=0, start=0, end=0 )=>list<tuple<int,int> >
</code>

此方法查找匹配于模式<it>pt</it>的子字符串的位置（下标和长度）。
如果<it>index</it>大于零，查找第<it>index</it>个匹配的子字符串，
否则查找所有的。此查找从字符串下标<it>start</it>开始，直到下标<it>end</it>结束。
如果<it>end</it>等于零，一直查找到字符串末尾。

<==>match(): 匹配模式</==>

<code dao>
string.match( pt : string, start=0, end=0, substring=1 )
=>tuple<start:int,end:int,substring:string>
</code>

从字符串下标<it>start</it>开始查找匹配于模式<it>pt</it>的子字符串,
直到下标<it>end</it>结束。如果<it>end</it>等于零，一直查找到字符串末尾。
如果<it>substring</it>非零，返回元组的<it>substring</it>成员将保存匹配的子字符串。

<==>extract(): 提取子字符串</==>

<code dao>
string.extract( pt : string, matched=1, mask='', rev=0 )=>list<string>
</code>

如果只使用参数<it>pt</it>（<it>matched</it>为正），此方法将从<it>string</it>里提取所有
能匹配到模式<it>pt</it>的子字符串。
当<it>matched</it>为负时，字符串将<it>string</it>被与模式<it>pt</it>相匹配的子字符串
所分割（所匹配子字符串的互补），并返回分割后的子字符串；
当<it>matched</it>为零时，返回所匹配子字符串及其互补。


如果另一个模式<it>mask</it>也作为参数传入给此方法（且<it>rev</it>是零），
对于模式<it>pt</it>的查找将被局限于与<it>mask</it>匹配的子字符串里；
如果<it>rev</it>不是零，与<it>mask</it>匹配的子字符串将从对于模式<it>pt</it>的查找中被排除。

<==>capture(): 扑获模式组</==>

<code dao>
string.capture( pt : string, start=0, end=0 )=>list<string>
</code>

查找与模式<it>pt</it>匹配的子字符串，获取并返回
与模式<it>pt</it>里模式组相匹配的子字符串。
返回的列表里的第i个元素对应于与第i个模式组相匹配的子字符串。

<==>change(): 替换子字符串</==>

<code dao>
string.change( pt : string, s : string, index=0, start=0, end=0 )=>int
</code>

将所有与模式<it>pt</it>的子字符串替换为字符串<it>s</it>。
<it>s</it>可以包含对模式组的向后引用，例如，
如果<it>s = 'abc%1'</it>，这表示<it>s</it>将是<it>abc</it>与匹配于
<it>pt</it>里标号为1的模式组的子字符串的连接。


如果参数<it>index</it>为正，仅替换第<it>index</it>个匹配的子字符串。
如果<it>end</it>为正，替换将被局限于下标从<it>start</it>到<it>end</it>
的子字符串里。


返回被替换的子字符串数目。


<====>例子</====>

<demo dao>
s = 'abc123def456';

stdio.println( s.pfind( '%d+' ) );
stdio.println( s.match( '%d+' ) );
stdio.println( s.extract( '%d+' ) );
stdio.println( s.extract( '%d+', -1 ) );
stdio.println( s.extract( '%d+', 0 ) );
stdio.println( s.capture( '(%a+)(%d+)' ) );

s.change( '(%a+)', '==%1==' );
stdio.println( s );

stdio.println( s.extract( '%d+', 1, '==%d+==' ) );
</demo>
