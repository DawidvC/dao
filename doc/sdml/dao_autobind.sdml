<title>Automatic Binding of C/C++ Libraries</title>

It is possible to use an automatic tool to generate wrapping of
C/C++ libraries directly from their header files.
This tools is normally included in Dao releases as <it>autobind.dao</it> 
under the fold of <it>tools</it>.
This document will brief explain how to use this tool.


The arguments of <it>autobind.dao</it>:
<list>
-- <bf>inputfiles</bf>:
	the list of header file names delimited by comma without white spaces.
	these header files will be parsed by the tool to generate wrapping codes.
<cite>
mgl_data.h,mgl_font.h,mgl.h,mgl_ab.h,mgl_zb.h
</cite>

	If these header files are dependent on other headers, 
	which however should be excluded from wrapping,
	one can also include them in the parameter,
	and separate them by colon from the other files:
<cite>
mgl_data.h:mgl_font.h,mgl.h,mgl_ab.h,mgl_zb.h
</cite>
	This way can be used to divide a big library into smaller parts
	and wrap them separately.
	Here one may wrap <it>mgl_data.h</it> separately, which is compiled
	into <it>DaoMglData</it> (with suffix <it>so</it> or <it>dll</it>), 
	and wrap the rest dependently on <it>mgl_data.h</it> 
	and compile the wrapping as <it>DaoMGL</it>,
	so that, <it>DaoMglData</it> can be used independently,
	while using <it>DaoMGL</it> has to require <it>DaoMglData</it>.
	Namely, when one load <it>DaoMGL</it>, one has to use,
<code dao>
load DaoMglData;
load DaoMGL require DaoMglData;
</code>

-- <bf>wrap_name</bf>: the wrapping name.
	By default, it is taken as the name of the first wrapped file
	in parameter <bf>inputfiles</bf>.
	One may use this argument to set a preferred wrapping,
	for example, in above example, one may set <it>wrap_name=MGL</it>.

-- <bf>lang</bf>: the language of the source codes in the header files.
	Currently it only supports <it>c</it> and <it>cpp</it>.

-- <bf>fixing</bf>: a text file containing patterns which should be used
	to handle library-specific codes.


	In each line of this file, there should be a pair of patterns enclosed
	in two pairs of <bf>'</bf> and delimited by a tab.
	In each pair of patterns, the first should be a pattern written
	as Dao regular expression, and the second should be a normal string
	that may contain back references to the groups in the first pattern.
	For each header files, this tool will search the codes that match
	the first pattern, and transform them into the second string with
	substitutions for the back references.
	If one wants a pair of patterns should be applied certain file,
	one may put the file name in a single line above that line.

	
	Here is an example taken from the <bf>fixing</bf> of DaoVTK module,
<code dao>
'VTK_%w+_EXPORT'	''
'VTK_BYTE_SWAP_DECL %s* %b() %s* ;'	''
'([^\n]*) vtkSetMacro %s*%(%s*(%w+)%s*,%s*(%w+)%s*%)'	'%1 virtual void Set%2(%3 _arg)'
'([^\n]*) vtkGetMacro %s*%(%s*(%w+)%s*,%s*(%w+)%s*%)'	'%1 virtual %3 Get%2()'

vtkInstantiator.h
'static [^;]* CreateFunction [^;]*;'	''

vtkOStreamWrapper.h
'static [^;]* UseEndl [^%{%}]* %b{}'	''

vtkLightKit.h
'static [^;]* GetSubType [^%{%}]* %b()'	''
</code>
	In this example, the first two lines indicate that some codes should be removed,
	and the third and fourth tell the tool how to expand two macros!
	The other patterns are applied only to certain files.

-- <bf>dir_input</bf>: the fold of the input header files.

-- <bf>dir_output</bf>: the output fold for the wrapped codes.

-- <bf>dir_inc</bf>: include directory,
	which is the directory that should prefix the header files
	in the generated codes.


	For example, one may has,
<code dao>
inputfiles=gl.h dir_input=/usr/include/GL dir_inc=GL
</code>
then the <it>gl.h</it> header file will be included in the generated codes as
<code cpp>
#include<GL/gl.h>
</code>

-- <bf>include</bf>: for dependent wrapping, it should include
	the wrapping names of the modules on which this wrapping is dependent on.


	For example, when wrapping VTK5, the common part is wrapped as
	<bf>wrap_name=vtkCommon</bf>,
	the part for filtering is wrapped as <bf>wrap_name=vtkFiltering</bf>,
	which is dependent on <bf>vtkCommon</bf>,
	then the <bf>include</bf> should be set as <bf>include=vtkCommon</bf>
	when wrapping <bf>vtkFiltering</bf>.

</list>
