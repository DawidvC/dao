
<title>
如何将脚本文件打包编译到道虚拟机可执行文件里
</title>

从道语言1.1开始，道虚拟机支持了虚拟文件，允许将保存在字符数组
里的脚本按正常的方式载入，并保持原有的路径结构和路径查找。


首先要做的是用一个<bf>xxd</bf>（使用<bf>-i</bf>选项）之类的十六进制转换工具
将脚本文件转换为十六进制码表示的字符串数组。
假定你有两个脚本文件，一个是load.dao，另一个是在module子目录的test.dao。


转换之后将生成如下数组：
<code cpp>
unsigned char module_test_dao[] = {
  0x0a, 0x6c, 0x20, 0x3d, 0x20, 0x28, ...
  0x6f, 0x6e, 0x67, 0x3e, 0x29, 0x7b, ...
  0x20, 0x7d, 0x3b, 0x0a, 0x6c, 0x32, ...
  0x4c, 0x20, 0x3a, 0x20, 0x31, 0x30, ...
  0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, ...
  0x20, 0x6c, 0x32, 0x2c, 0x20, 0x28, ...
  0x2c, 0x20, 0x28, 0x6c, 0x6f, 0x6e, ...
  0x32, 0x33, 0x34, 0x35, 0x36, 0x37, ...
  0x35, 0x36, 0x37, 0x38, 0x39, 0x31, ...
  0x38, 0x39, 0x27, 0x20, 0x29, 0x3b, ...
  0x54, 0x65, 0x73, 0x74, 0x28, 0x29, ...
  0x6f, 0x2e, 0x77, 0x72, 0x69, 0x74, ...
  0x63, 0x61, 0x6c, 0x6c, 0x20, 0x54, ...
  0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a
};
unsigned int module_test_dao_len = 162;
unsigned char load_dao[] = {
  0x0a, 0x6c, 0x6f, 0x61, 0x64, 0x20, ...
  0x65, 0x73, 0x74, 0x3b, 0x0a, 0x0a, ...
  0x3b, 0x0a
};
unsigned int load_dao_len = 26;
</code>
然后再定义另一个数组：
<code cpp>
char* dao_virtual_files[][2] =
{
  { "load.dao", load_dao },
  { "module/test.dao", module_test_dao },
  { NULL, NULL }
};
</code>
这个数组保存了一组路径文件名和相对应文件代码的十六进制字符串表示。
这个数组必须被命名为dao_virtual_files。


这个数组的第一个元素里的文件被认为是主文件，它接受并处理
命令行参数，是开始被执行的脚本。
最后的元素必须由NULL填充，表示此数组已结束。
数组的其他元素可保存第一个脚本所需要的，模块化的脚本文件。
这里的第二个元素的路径文件名为module/test.dao，
这将道语言虚拟机对载入语句"load module.test;"做正确的处理。


最后，包含这些数组的文件可以和道语言虚拟机编译在一起，
这需要使用道虚拟机所提供的daoMainv.c主文件而不是通常使用的
daoMain.c和daoMaindl.c。
要编译在一起，既可直接将这个文件包含在daoMainv.c里，
也可单独编译然后链接在一起。


就这么简单，也许将来会有一个工具提供出来自动地做这种打包处理。
